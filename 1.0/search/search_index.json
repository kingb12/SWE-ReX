{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SWE-ReX","text":""},{"location":"#swe-rex","title":"SWE-ReX","text":"<p>SWE-ReX is a runtime interface for interacting with sandboxed shell environments, allowing you to effortlessly let your AI agent run any command on any environment.</p> <p>Whether commands are executed locally or remotely in Docker containers, AWS remote machines, Modal, or something else, your agent code remains the same. Running 100 agents in parallel? No problem either!</p> <p>Specifically, SWE-ReX allows your agent to</p> <ul> <li>\u2705 Interact with running shell sessions. SWE-ReX will recognize when commands are finished, extract the output and exit code and return them to your agent.</li> <li>\u2705 Let your agent use interactive command line tools like <code>ipython</code>, <code>gdb</code> or more in the shell.</li> <li>\u2705 Interact with multiple such shell sessions in parallel, similar to how humans can have a shell, ipython, gdb, etc. all running at the same time.</li> </ul> <p>We built SWE-ReX to help you focus on developing and evaluating your agent, not on infrastructure.</p> <p>SWE-ReX came out of our experiences with SWE-agent and SWE-agent enigma. Using SWE-ReX, we</p> <ul> <li>\ud83e\udd96 Support fast, massively parallel agent runs (which made evaluating on large benchmarks a breeze).</li> <li>\ud83e\udd96 Support a broad range of platforms, including non-Linux machines without Docker.</li> <li>\ud83e\udd96 Disentangle agent logic from infrastructure concerns, making SWE-agent more stable and easier to maintain.</li> </ul> SWE-Agent running with SWE-ReX on 30 SWE-bench instances bug_report Something broken/unclear? <p>Open an issue on GitHub!</p> help Open-ended discussions <p>Join our Slack!</p>"},{"location":"SECURITY/","title":"Security Policy","text":""},{"location":"SECURITY/#security-policy","title":"Security Policy","text":""},{"location":"SECURITY/#reporting-a-vulnerability","title":"Reporting a Vulnerability","text":"<p>Please contact Kilian Lieret (kl5675@princeton.edu), John Yang (johnby@stanford.edu), Carlos E. Jimenez (carlosej@princeton.edu), and Ofir Press (ofirp@princeton.edu).</p>"},{"location":"_footer/","title":"footer","text":"bug_report Something broken/unclear? <p>Open an issue on GitHub!</p> help Open-ended discussions <p>Join our Slack!</p>"},{"location":"architecture/","title":"Architecture","text":"<p>Let's take a look how SWE-ReX works:</p> <ol> <li>Your central entry point is one of the <code>Deployment</code> classes, depending on where your code should run. </li> <li>Your <code>Deployment</code> instances allows your to start your docker container, AWS instance, or whatever at the push of a button. That's right, no more fiddling with the AWS console!</li> <li>After the <code>Deployment</code> has started your container somewhere, you are handed a <code>RemoteRuntime</code> instance.   This is your main interface for interacting with the environment. You can use it start new shell or interactive sessions, read and write files, execute one-off commands, etc.</li> </ol> <p></p> <p>Looking closer at the internals:</p> <ol> <li> <p>Within the container, we have a fastapi Server that transfers all request from the <code>RemoteRuntime</code> to the <code>LocalRuntime</code>.    The <code>LocalRuntime</code> has the exact same interface as the <code>RemoteRuntime</code> class and it is what actually executes the commands.    In fact, if you want to run something locally (or your whole codebase runs in a sandboxed environment), you can just use the <code>LocalRuntime</code> directly!    Both classes are absolutely interchangeable, in fact we even transfer any exceptions happening in the <code>LocalRuntime</code> to the <code>RemoteRuntime</code> transparently,    so you can easily catch and ignore certain errors.</p> </li> <li> <p>The <code>Runtime</code> class provides several methods for reading/writing files, an <code>execute</code> method for running arbitrary commands, but the most important one is <code>run_in_session</code>.    This method allows you to run a command in an existing shell session (or an interactive tool running inside of it) and return the output.    In fact, you can have multiple sessions open at the same time, running different commands and tools in parallel!</p> </li> </ol>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#installation","title":"Installation","text":"<p>For the latest stable release:</p> <pre><code>pip install swe-rex\n# With modal support\npip install 'swe-rex[modal]'\n# With fargate support\npip install 'swe-rex[fargate]'\n# Development setup (all optional dependencies)\npip install 'swe-rex[dev]'\n</code></pre> <p>For the latest development version:</p> <pre><code>git clone https://github.com/SWE-agent/swe-rex\ncd swe-rex\npip install -e '.[dev]'\n</code></pre> <p>If you want to contribute, please also use pre-commit:</p> <pre><code>pre-commit install\n</code></pre> bug_report Something broken/unclear? <p>Open an issue on GitHub!</p> help Open-ended discussions <p>Join our Slack!</p>"},{"location":"usage/","title":"Tutorial","text":""},{"location":"usage/#tutorial","title":"Tutorial","text":"<p>Here are a few examples of how to use SWE-ReX.</p>"},{"location":"usage/#hello-world-from-your-own-machine","title":"Hello world from your own machine","text":"<p>Warning</p> <p>This first example will run commands on your local machine without any sandboxing, so don't <code>rm -rf /</code>! Wait for the next example to see how to put it in a sandbox ;) </p> <p>Note</p> <p>SWE-ReX is inherently asynchronous, so you might want to take a quick look at python's <code>asyncio</code> module before continuing (or click the  icons in the next example).</p> <pre><code>import asyncio\nfrom swerex.deployment.local import LocalDeployment\nfrom swerex.runtime.abstract import CreateBashSessionRequest, BashAction, Command\n\ndeployment = LocalDeployment()\n\nasync def run_some_stuff(deployment):\n    \"\"\"Spoiler: This function will work with any deployment.\"\"\"\n    await deployment.start()  # (1)!\n    runtime = deployment.runtime\n\n    # Issue a few one-off commands, similar to `subprocess.run()`\n    print(await runtime.execute(Command(command=[\"echo\", \"Hello, world!\"])))\n\n    # Create a bash session\n    await runtime.create_session(CreateBashSessionRequest())\n\n    # Run a command in the session\n    # The difference to the one-off commands is that environment state persists!\n    print(await runtime.run_in_session(BashAction(command=\"export MYVAR='test'\")))\n    print(await runtime.run_in_session(BashAction(command=\"echo $MYVAR\")))\n\n    await deployment.stop()  # (2)!\n\nasyncio.run(run_some_stuff(deployment))  # (3)!\n</code></pre> <ol> <li> <p>In the case of a <code>LocalDeployment</code>, this won't do much. However, if you run in a docker container or similar, this will for example pull the container image and start the runtime in it. The <code>await</code> will wait until the runtime has been started.</p> </li> <li> <p>Again, this won't do much in the case of a <code>LocalDeployment</code>, but it will kill docker containers or similar when used with the appropriate deployment.</p> </li> <li> <p>Since this is an async function, we need to call it with <code>asyncio.run()</code> when not running in another async function.</p> </li> </ol>"},{"location":"usage/#our-first-remote-run","title":"Our first \"remote\" run","text":"<p>The best thing about SWE-ReX is that you can switch between deployments without any changes to your code! We will simply use the same <code>run_some_stuff</code> function but change the deployment to a <code>DockerDeployment</code>:</p> <pre><code>from swerex.deployment.docker import DockerDeployment\n\ndeployment = DockerDeployment(image=\"python:3.12\")\nasyncio.run(run_some_stuff(deployment))\n</code></pre> <p>You should see the following output:</p> <pre><code>\ud83e\udd96 DEBUG    Ensuring deployment is stopped because object is deleted\n\ud83e\udd96 INFO     Pulling image 'python:3.12'\n\ud83e\udd96 DEBUG    Found free port 59647\n\ud83e\udd96 INFO     Starting container python3.12-608e9964-2a5e-409b-a7b7-52b520034068 with image python:3.12 serving on port 59647\n\ud83e\udd96 DEBUG    Command: \"docker run --rm -p 59647:8000 --name python3.12-608e9964-2a5e-409b-a7b7-52b520034068 python:3.12 /bin/sh -c 'swerex-remote --auth-token 1d87776a-1ab2-422e-bd80-fc34d810633f || (python3 -m pip install pipx &amp;&amp; python3 -m pipx ensurepath &amp;&amp; pipx run\n            0fdb5604 --auth-token 1d87776a-1ab2-422e-bd80-fc34d810633f)'\"\n\ud83e\udd96 INFO     Starting runtime at 59647\n\ud83e\udd96 INFO     Runtime started in 18.78s\nstdout='Hello, world!\\n' stderr='' exit_code=0\noutput='' exit_code=0 failure_reason='' expect_string='SHELLPS1PREFIX' session_type='bash'\noutput='test' exit_code=0 failure_reason='' expect_string='SHELLPS1PREFIX' session_type='bash'\n</code></pre> <p>So what's going on here? There's multiple steps:</p> <ol> <li>We pull the <code>python:3.12</code> image from Docker Hub and start a container from it.</li> <li>We run <code>swerex-remote</code> in the container. It is installed by <code>pipx</code> in a virtual environment, so it will not pollute your global Python environment. This is a small server that will wait for commands from SWE-ReX. Fun fact, this will basically run the <code>LocalRuntime</code> which was started by the <code>LocalDeployment</code> in the previous example.</li> <li><code>DockerDeployment</code> starts a <code>RemoteRuntime</code> that connects to the <code>swerex-remote</code> server in the container and executes your commands.</li> </ol>"},{"location":"usage/#running-with-modal","title":"Running with Modal","text":"<p>Similarly, you can also create remote runs on Modal by swapping out the <code>DockerDeployment</code> with <code>ModalDeployment</code>.</p> <pre><code>from swerex.deployment.modal import ModalDeployment\n\nasync def run_modal_deployment():\n    deployment = ModalDeployment(\n        image=\"python:3.12\",\n        startup_timeout=60, # wait 1 minute for deployment to start\n        deployment_timeout=3600, # kill deployment after 1 hour\n    )\n    await deployment.start()\n    await deployment.is_alive()\n    return deployment\n\ndeployment = asyncio.run(run_modal_deployment())\nasyncio.run(run_some_stuff(deployment))\n</code></pre> <p>You should see the following output:</p> <pre><code>\ud83e\udd96 INFO     Building image from docker registry python:3.12\n\ud83e\udd96 INFO     Starting modal sandbox\n\ud83e\udd96 INFO     Sandbox (sb-[ID]) created in 0.91s\n\ud83e\udd96 INFO     Check sandbox logs at [MODAL_APP_LOGS_URL]\n\ud83e\udd96 INFO     Sandbox created with id sb-[ID]\n\ud83e\udd96 INFO     Starting runtime at [MODAL_HOST_URL]   \n\ud83e\udd96 INFO     Runtime started in 10.46s\n\ud83e\udd96 INFO     Starting modal sandbox\n\ud83e\udd96 INFO     Sandbox (sb-[ID]) created in 1.17s\n\ud83e\udd96 INFO     Check sandbox logs at [MODAL_APP_LOGS_URL]  \n\ud83e\udd96 INFO     Sandbox created with id sb-[ID]\n\ud83e\udd96 INFO     Starting runtime at [MODAL_HOST_URL]\n\ud83e\udd96 INFO     Runtime started in 10.80s                                       \nstdout='Hello, world!\\n' stderr='' exit_code=0\noutput='' exit_code=0 failure_reason='' expect_string='SHELLPS1PREFIX' session_type='bash'\noutput='test\\n' exit_code=0 failure_reason='' expect_string='SHELLPS1PREFIX' session_type='bash'\n\ud83e\udd96 DEBUG    Ensuring deployment is stopped because object is deleted          \n</code></pre> bug_report Something broken/unclear? <p>Open an issue on GitHub!</p> help Open-ended discussions <p>Join our Slack!</p>"},{"location":"api/server/","title":"Server","text":""},{"location":"api/server/#server","title":"Server","text":""},{"location":"api/server/#swerex.server","title":"swerex.server","text":""},{"location":"api/server/#swerex.server.AUTH_TOKEN","title":"AUTH_TOKEN  <code>module-attribute</code>","text":"<pre><code>AUTH_TOKEN = ''\n</code></pre>"},{"location":"api/server/#swerex.server.api_key_header","title":"api_key_header  <code>module-attribute</code>","text":"<pre><code>api_key_header = APIKeyHeader(name='X-API-Key')\n</code></pre>"},{"location":"api/server/#swerex.server.response_manager","title":"response_manager  <code>module-attribute</code>","text":"<pre><code>response_manager = ResponseManager()\n</code></pre>"},{"location":"api/server/#swerex.server.ResponseManager","title":"ResponseManager","text":"<pre><code>ResponseManager()\n</code></pre> <p>This stores the response of the last request, and is used in retries to return already executed requests.</p> <p>Note that in the case of multiple concurrent clients, idempotency isn't guaranteed.</p> Source code in <code>swerex/server.py</code> <pre><code>def __init__(self):\n    self.last_processed_request_id = None\n    self.last_processed_response = None\n</code></pre>"},{"location":"api/server/#swerex.server.ResponseManager.last_processed_request_id","title":"last_processed_request_id  <code>instance-attribute</code>","text":"<pre><code>last_processed_request_id = None\n</code></pre>"},{"location":"api/server/#swerex.server.ResponseManager.last_processed_response","title":"last_processed_response  <code>instance-attribute</code>","text":"<pre><code>last_processed_response = None\n</code></pre>"},{"location":"api/server/#swerex.server.ResponseManager.get_response","title":"get_response","text":"<pre><code>get_response(request_id)\n</code></pre> Source code in <code>swerex/server.py</code> <pre><code>def get_response(self, request_id):\n    if request_id == self.last_processed_request_id:\n        return self.last_processed_response\n    return None\n</code></pre>"},{"location":"api/server/#swerex.server.ResponseManager.set_response","title":"set_response","text":"<pre><code>set_response(request_id, response)\n</code></pre> Source code in <code>swerex/server.py</code> <pre><code>def set_response(self, request_id, response):\n    self.last_processed_request_id = request_id\n    self.last_processed_response = response\n</code></pre>"},{"location":"api/server/#swerex.server.authenticate","title":"authenticate  <code>async</code>","text":"<pre><code>authenticate(request: Request, call_next)\n</code></pre> <p>Authenticate requests with an API key (if set).</p> Source code in <code>swerex/server.py</code> <pre><code>@app.middleware(\"http\")\nasync def authenticate(request: Request, call_next):\n    \"\"\"Authenticate requests with an API key (if set).\"\"\"\n    if AUTH_TOKEN:\n        api_key = await api_key_header(request)\n        if api_key != AUTH_TOKEN:\n            raise HTTPException(status_code=401, detail=\"Invalid API Key\")\n    return await call_next(request)\n</code></pre>"},{"location":"api/server/#swerex.server.close","title":"close  <code>async</code>","text":"<pre><code>close()\n</code></pre> Source code in <code>swerex/server.py</code> <pre><code>@app.post(\"/close\")\nasync def close():\n    await runtime.close()\n    return CloseResponse()\n</code></pre>"},{"location":"api/server/#swerex.server.close_session","title":"close_session  <code>async</code>","text":"<pre><code>close_session(request: CloseSessionRequest)\n</code></pre> Source code in <code>swerex/server.py</code> <pre><code>@app.post(\"/close_session\")\nasync def close_session(request: CloseSessionRequest):\n    return serialize_model(await runtime.close_session(request))\n</code></pre>"},{"location":"api/server/#swerex.server.create_session","title":"create_session  <code>async</code>","text":"<pre><code>create_session(request: CreateSessionRequest)\n</code></pre> Source code in <code>swerex/server.py</code> <pre><code>@app.post(\"/create_session\")\nasync def create_session(request: CreateSessionRequest):\n    return serialize_model(await runtime.create_session(request))\n</code></pre>"},{"location":"api/server/#swerex.server.exception_handler","title":"exception_handler  <code>async</code>","text":"<pre><code>exception_handler(request: Request, exc: Exception)\n</code></pre> <p>We catch exceptions that are thrown by the runtime, serialize them to JSON and return them to the client so they can reraise them in their own code.</p> Source code in <code>swerex/server.py</code> <pre><code>@app.exception_handler(Exception)\nasync def exception_handler(request: Request, exc: Exception):\n    \"\"\"We catch exceptions that are thrown by the runtime, serialize them to JSON and\n    return them to the client so they can reraise them in their own code.\n    \"\"\"\n    if isinstance(exc, HTTPException | StarletteHTTPException):\n        return await http_exception_handler(request, exc)\n    extra_info = getattr(exc, \"extra_info\", {})\n    _exc = _ExceptionTransfer(\n        message=str(exc),\n        class_path=type(exc).__module__ + \".\" + type(exc).__name__,\n        traceback=traceback.format_exc(),\n        extra_info=extra_info,\n    )\n    return JSONResponse(status_code=511, content={\"swerexception\": _exc.model_dump()})\n</code></pre>"},{"location":"api/server/#swerex.server.execute","title":"execute  <code>async</code>","text":"<pre><code>execute(command: Command)\n</code></pre> Source code in <code>swerex/server.py</code> <pre><code>@app.post(\"/execute\")\nasync def execute(command: Command):\n    return serialize_model(await runtime.execute(command))\n</code></pre>"},{"location":"api/server/#swerex.server.handle_request_id","title":"handle_request_id  <code>async</code>","text":"<pre><code>handle_request_id(request: Request, call_next)\n</code></pre> <p>Handle request ID for idempotency.</p> Source code in <code>swerex/server.py</code> <pre><code>@app.middleware(\"http\")\nasync def handle_request_id(request: Request, call_next):\n    \"\"\"Handle request ID for idempotency.\"\"\"\n    request_id = request.headers.get(\"X-Request-ID\")\n    if request_id:\n        response = response_manager.get_response(request_id)\n        if response:\n            return response\n\n    response = await call_next(request)\n\n    body_content = b\"\"\n    async for chunk in response.body_iterator:\n        body_content += chunk\n\n    new_response = Response(\n        content=body_content,\n        status_code=response.status_code,\n        headers=dict(response.headers),\n        media_type=response.media_type,\n    )\n\n    if request_id:\n        response_manager.set_response(request_id, new_response)\n\n    return new_response\n</code></pre>"},{"location":"api/server/#swerex.server.is_alive","title":"is_alive  <code>async</code>","text":"<pre><code>is_alive()\n</code></pre> Source code in <code>swerex/server.py</code> <pre><code>@app.get(\"/is_alive\")\nasync def is_alive():\n    return serialize_model(await runtime.is_alive())\n</code></pre>"},{"location":"api/server/#swerex.server.read_file","title":"read_file  <code>async</code>","text":"<pre><code>read_file(request: ReadFileRequest)\n</code></pre> Source code in <code>swerex/server.py</code> <pre><code>@app.post(\"/read_file\")\nasync def read_file(request: ReadFileRequest):\n    return serialize_model(await runtime.read_file(request))\n</code></pre>"},{"location":"api/server/#swerex.server.root","title":"root  <code>async</code>","text":"<pre><code>root()\n</code></pre> Source code in <code>swerex/server.py</code> <pre><code>@app.get(\"/\")\nasync def root():\n    return {\"message\": \"hello world\"}\n</code></pre>"},{"location":"api/server/#swerex.server.run","title":"run  <code>async</code>","text":"<pre><code>run(action: Action)\n</code></pre> Source code in <code>swerex/server.py</code> <pre><code>@app.post(\"/run_in_session\")\nasync def run(action: Action):\n    return serialize_model(await runtime.run_in_session(action))\n</code></pre>"},{"location":"api/server/#swerex.server.serialize_model","title":"serialize_model","text":"<pre><code>serialize_model(model)\n</code></pre> Source code in <code>swerex/server.py</code> <pre><code>def serialize_model(model):\n    return model.model_dump() if hasattr(model, \"model_dump\") else model.dict()\n</code></pre>"},{"location":"api/server/#swerex.server.upload","title":"upload  <code>async</code>","text":"<pre><code>upload(file: UploadFile = File(...), target_path: str = Form(...), unzip: bool = Form(False))\n</code></pre> Source code in <code>swerex/server.py</code> <pre><code>@app.post(\"/upload\")\nasync def upload(\n    file: UploadFile = File(...),\n    target_path: str = Form(...),  # type: ignore\n    unzip: bool = Form(False),\n):\n    target_path: Path = Path(target_path)\n    target_path.parent.mkdir(parents=True, exist_ok=True)\n    # First save the file to a temporary directory and potentially unzip it.\n    with tempfile.TemporaryDirectory() as temp_dir:\n        file_path = Path(temp_dir) / \"temp_file_transfer\"\n        try:\n            with open(file_path, \"wb\") as f:\n                f.write(await file.read())\n        finally:\n            await file.close()\n        if unzip:\n            with zipfile.ZipFile(file_path, \"r\") as zip_ref:\n                zip_ref.extractall(target_path)\n            file_path.unlink()\n        else:\n            shutil.move(file_path, target_path)\n    return UploadResponse()\n</code></pre>"},{"location":"api/server/#swerex.server.write_file","title":"write_file  <code>async</code>","text":"<pre><code>write_file(request: WriteFileRequest)\n</code></pre> Source code in <code>swerex/server.py</code> <pre><code>@app.post(\"/write_file\")\nasync def write_file(request: WriteFileRequest):\n    return serialize_model(await runtime.write_file(request))\n</code></pre>"},{"location":"api/deployments/abstract/","title":"Abstract","text":""},{"location":"api/deployments/abstract/#swerex.deployment.abstract.AbstractDeployment","title":"swerex.deployment.abstract.AbstractDeployment","text":"<pre><code>AbstractDeployment(*args, **kwargs)\n</code></pre> <p>               Bases: <code>ABC</code></p> Source code in <code>swerex/deployment/abstract.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    self.logger: logging.Logger\n</code></pre>"},{"location":"api/deployments/abstract/#swerex.deployment.abstract.AbstractDeployment.logger","title":"logger  <code>instance-attribute</code>","text":"<pre><code>logger: Logger\n</code></pre>"},{"location":"api/deployments/abstract/#swerex.deployment.abstract.AbstractDeployment.runtime","title":"runtime  <code>abstractmethod</code> <code>property</code>","text":"<pre><code>runtime: AbstractRuntime\n</code></pre> <p>Returns the runtime if running.</p> <p>Raises:</p> Type Description <code>DeploymentNotStartedError</code> <p>If the deployment was not started.</p>"},{"location":"api/deployments/abstract/#swerex.deployment.abstract.AbstractDeployment.__del__","title":"__del__","text":"<pre><code>__del__()\n</code></pre> <p>Stops the runtime when the object is deleted.</p> Source code in <code>swerex/deployment/abstract.py</code> <pre><code>def __del__(self):\n    \"\"\"Stops the runtime when the object is deleted.\"\"\"\n    # Need to be check whether we are in an async event loop or not\n    # https://stackoverflow.com/questions/54770360/\n    msg = \"Ensuring deployment is stopped because object is deleted\"\n    try:\n        self.logger.debug(msg)\n    except Exception:\n        print(msg)\n    try:\n        loop = asyncio.get_event_loop()\n        if loop.is_running():\n            loop.create_task(self.stop())\n        else:\n            loop.run_until_complete(self.stop())\n    except Exception:\n        pass\n</code></pre>"},{"location":"api/deployments/abstract/#swerex.deployment.abstract.AbstractDeployment.add_hook","title":"add_hook  <code>abstractmethod</code>","text":"<pre><code>add_hook(hook: DeploymentHook)\n</code></pre> Source code in <code>swerex/deployment/abstract.py</code> <pre><code>@abstractmethod\ndef add_hook(self, hook: DeploymentHook): ...\n</code></pre>"},{"location":"api/deployments/abstract/#swerex.deployment.abstract.AbstractDeployment.is_alive","title":"is_alive  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>is_alive(*, timeout: float | None = None) -&gt; IsAliveResponse\n</code></pre> <p>Checks if the runtime is alive. The return value can be tested with bool().</p> <p>Raises:</p> Type Description <code>DeploymentNotStartedError</code> <p>If the deployment was not started.</p> Source code in <code>swerex/deployment/abstract.py</code> <pre><code>@abstractmethod\nasync def is_alive(self, *, timeout: float | None = None) -&gt; IsAliveResponse:\n    \"\"\"Checks if the runtime is alive. The return value can be\n    tested with bool().\n\n    Raises:\n        DeploymentNotStartedError: If the deployment was not started.\n    \"\"\"\n</code></pre>"},{"location":"api/deployments/abstract/#swerex.deployment.abstract.AbstractDeployment.start","title":"start  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>start(*args, **kwargs)\n</code></pre> <p>Starts the runtime.</p> Source code in <code>swerex/deployment/abstract.py</code> <pre><code>@abstractmethod\nasync def start(self, *args, **kwargs):\n    \"\"\"Starts the runtime.\"\"\"\n</code></pre>"},{"location":"api/deployments/abstract/#swerex.deployment.abstract.AbstractDeployment.stop","title":"stop  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>stop(*args, **kwargs)\n</code></pre> <p>Stops the runtime.</p> Source code in <code>swerex/deployment/abstract.py</code> <pre><code>@abstractmethod\nasync def stop(self, *args, **kwargs):\n    \"\"\"Stops the runtime.\"\"\"\n</code></pre>"},{"location":"api/deployments/config/","title":"Deployment configuration","text":""},{"location":"api/deployments/config/#deployment-configuration-objects","title":"Deployment configuration objects","text":"<p>These configuration objects can be used to configure deployments.</p> <p>For example:</p> <pre><code>from swerex.deployment.config import DockerDeploymentConfig\n\nconfig = DockerDeploymentConfig(image=\"python:3.11\")\ndeployment = config.get_deployment()\n</code></pre>"},{"location":"api/deployments/config/#swerex.deployment.config.DeploymentConfig","title":"DeploymentConfig  <code>module-attribute</code>","text":"<pre><code>DeploymentConfig = LocalDeploymentConfig | DockerDeploymentConfig | ModalDeploymentConfig | FargateDeploymentConfig | RemoteDeploymentConfig | DummyDeploymentConfig | DaytonaDeploymentConfig\n</code></pre> <p>Union of all deployment configurations. Useful for type hints.</p>"},{"location":"api/deployments/config/#swerex.deployment.config.LocalDeploymentConfig","title":"LocalDeploymentConfig  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Configuration for running locally.</p> <p>Config:</p> <ul> <li><code>extra</code>: <code>forbid</code></li> </ul> <p>Fields:</p> <ul> <li> <code>type</code>                 (<code>Literal['local']</code>)             </li> </ul>"},{"location":"api/deployments/config/#swerex.deployment.config.LocalDeploymentConfig.type","title":"type  <code>pydantic-field</code>","text":"<pre><code>type: Literal['local'] = 'local'\n</code></pre> <p>Discriminator for (de)serialization/CLI. Do not change.</p>"},{"location":"api/deployments/config/#swerex.deployment.config.LocalDeploymentConfig.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(extra='forbid')\n</code></pre>"},{"location":"api/deployments/config/#swerex.deployment.config.LocalDeploymentConfig.get_deployment","title":"get_deployment","text":"<pre><code>get_deployment() -&gt; AbstractDeployment\n</code></pre>"},{"location":"api/deployments/config/#swerex.deployment.config.DockerDeploymentConfig","title":"DockerDeploymentConfig  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Configuration for running locally in a Docker or Podman container.</p> <p>Config:</p> <ul> <li><code>extra</code>: <code>forbid</code></li> </ul> <p>Fields:</p> <ul> <li> <code>image</code>                 (<code>str</code>)             </li> <li> <code>port</code>                 (<code>int | None</code>)             </li> <li> <code>docker_args</code>                 (<code>list[str]</code>)             </li> <li> <code>startup_timeout</code>                 (<code>float</code>)             </li> <li> <code>pull</code>                 (<code>Literal['never', 'always', 'missing']</code>)             </li> <li> <code>remove_images</code>                 (<code>bool</code>)             </li> <li> <code>python_standalone_dir</code>                 (<code>str | None</code>)             </li> <li> <code>platform</code>                 (<code>str | None</code>)             </li> <li> <code>remove_container</code>                 (<code>bool</code>)             </li> <li> <code>container_runtime</code>                 (<code>Literal['docker', 'podman']</code>)             </li> <li> <code>type</code>                 (<code>Literal['docker']</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>validate_platform_args</code> </li> </ul>"},{"location":"api/deployments/config/#swerex.deployment.config.DockerDeploymentConfig.image","title":"image  <code>pydantic-field</code>","text":"<pre><code>image: str = 'python:3.11'\n</code></pre> <p>The name of the container image to use.</p>"},{"location":"api/deployments/config/#swerex.deployment.config.DockerDeploymentConfig.port","title":"port  <code>pydantic-field</code>","text":"<pre><code>port: int | None = None\n</code></pre> <p>The port that the container connects to. If None, a free port is found.</p>"},{"location":"api/deployments/config/#swerex.deployment.config.DockerDeploymentConfig.docker_args","title":"docker_args  <code>pydantic-field</code>","text":"<pre><code>docker_args: list[str] = []\n</code></pre> <p>Additional arguments to pass to the container run command. If --platform is specified here, it will be moved to the platform field.</p>"},{"location":"api/deployments/config/#swerex.deployment.config.DockerDeploymentConfig.startup_timeout","title":"startup_timeout  <code>pydantic-field</code>","text":"<pre><code>startup_timeout: float = 180.0\n</code></pre> <p>The time to wait for the runtime to start.</p>"},{"location":"api/deployments/config/#swerex.deployment.config.DockerDeploymentConfig.pull","title":"pull  <code>pydantic-field</code>","text":"<pre><code>pull: Literal['never', 'always', 'missing'] = 'missing'\n</code></pre> <p>When to pull container images.</p>"},{"location":"api/deployments/config/#swerex.deployment.config.DockerDeploymentConfig.remove_images","title":"remove_images  <code>pydantic-field</code>","text":"<pre><code>remove_images: bool = False\n</code></pre> <p>Whether to remove the image after it has stopped.</p>"},{"location":"api/deployments/config/#swerex.deployment.config.DockerDeploymentConfig.python_standalone_dir","title":"python_standalone_dir  <code>pydantic-field</code>","text":"<pre><code>python_standalone_dir: str | None = None\n</code></pre> <p>The directory to use for the python standalone.</p>"},{"location":"api/deployments/config/#swerex.deployment.config.DockerDeploymentConfig.platform","title":"platform  <code>pydantic-field</code>","text":"<pre><code>platform: str | None = None\n</code></pre> <p>The platform to use for the container image.</p>"},{"location":"api/deployments/config/#swerex.deployment.config.DockerDeploymentConfig.remove_container","title":"remove_container  <code>pydantic-field</code>","text":"<pre><code>remove_container: bool = True\n</code></pre> <p>Whether to remove the container after it has stopped.</p>"},{"location":"api/deployments/config/#swerex.deployment.config.DockerDeploymentConfig.container_runtime","title":"container_runtime  <code>pydantic-field</code>","text":"<pre><code>container_runtime: Literal['docker', 'podman'] = 'docker'\n</code></pre> <p>The container runtime to use (docker or podman).</p>"},{"location":"api/deployments/config/#swerex.deployment.config.DockerDeploymentConfig.type","title":"type  <code>pydantic-field</code>","text":"<pre><code>type: Literal['docker'] = 'docker'\n</code></pre> <p>Discriminator for (de)serialization/CLI. Do not change.</p>"},{"location":"api/deployments/config/#swerex.deployment.config.DockerDeploymentConfig.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(extra='forbid')\n</code></pre>"},{"location":"api/deployments/config/#swerex.deployment.config.DockerDeploymentConfig.validate_platform_args","title":"validate_platform_args  <code>pydantic-validator</code>","text":"<pre><code>validate_platform_args(data: dict) -&gt; dict\n</code></pre>"},{"location":"api/deployments/config/#swerex.deployment.config.DockerDeploymentConfig.get_deployment","title":"get_deployment","text":"<pre><code>get_deployment() -&gt; AbstractDeployment\n</code></pre>"},{"location":"api/deployments/config/#swerex.deployment.config.ModalDeploymentConfig","title":"ModalDeploymentConfig  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Configuration for running on Modal.</p> <p>Config:</p> <ul> <li><code>extra</code>: <code>forbid</code></li> </ul> <p>Fields:</p> <ul> <li> <code>image</code>                 (<code>str | PurePath</code>)             </li> <li> <code>startup_timeout</code>                 (<code>float</code>)             </li> <li> <code>runtime_timeout</code>                 (<code>float</code>)             </li> <li> <code>deployment_timeout</code>                 (<code>float</code>)             </li> <li> <code>modal_sandbox_kwargs</code>                 (<code>dict[str, Any]</code>)             </li> <li> <code>type</code>                 (<code>Literal['modal']</code>)             </li> <li> <code>install_pipx</code>                 (<code>bool</code>)             </li> </ul>"},{"location":"api/deployments/config/#swerex.deployment.config.ModalDeploymentConfig.image","title":"image  <code>pydantic-field</code>","text":"<pre><code>image: str | PurePath = 'python:3.11'\n</code></pre> <p>Image to use for the deployment.</p>"},{"location":"api/deployments/config/#swerex.deployment.config.ModalDeploymentConfig.startup_timeout","title":"startup_timeout  <code>pydantic-field</code>","text":"<pre><code>startup_timeout: float = 180.0\n</code></pre> <p>The time to wait for the runtime to start.</p>"},{"location":"api/deployments/config/#swerex.deployment.config.ModalDeploymentConfig.runtime_timeout","title":"runtime_timeout  <code>pydantic-field</code>","text":"<pre><code>runtime_timeout: float = 60.0\n</code></pre> <p>Runtime timeout (default timeout for all runtime requests)</p>"},{"location":"api/deployments/config/#swerex.deployment.config.ModalDeploymentConfig.deployment_timeout","title":"deployment_timeout  <code>pydantic-field</code>","text":"<pre><code>deployment_timeout: float = 3600.0\n</code></pre> <p>Kill deployment after this many seconds no matter what. This is a useful killing switch to ensure that you don't spend too  much money on modal.</p>"},{"location":"api/deployments/config/#swerex.deployment.config.ModalDeploymentConfig.modal_sandbox_kwargs","title":"modal_sandbox_kwargs  <code>pydantic-field</code>","text":"<pre><code>modal_sandbox_kwargs: dict[str, Any] = {}\n</code></pre> <p>Additional arguments to pass to <code>modal.Sandbox.create</code></p>"},{"location":"api/deployments/config/#swerex.deployment.config.ModalDeploymentConfig.type","title":"type  <code>pydantic-field</code>","text":"<pre><code>type: Literal['modal'] = 'modal'\n</code></pre> <p>Discriminator for (de)serialization/CLI. Do not change.</p>"},{"location":"api/deployments/config/#swerex.deployment.config.ModalDeploymentConfig.install_pipx","title":"install_pipx  <code>pydantic-field</code>","text":"<pre><code>install_pipx: bool = True\n</code></pre> <p>Whether to install pipx with apt in the container. This is enabled by default so we can fall back to installing swe-rex with pipx if the image does not have it. However, depending on your image, installing pipx might fail (or be slow).</p>"},{"location":"api/deployments/config/#swerex.deployment.config.ModalDeploymentConfig.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(extra='forbid')\n</code></pre>"},{"location":"api/deployments/config/#swerex.deployment.config.ModalDeploymentConfig.get_deployment","title":"get_deployment","text":"<pre><code>get_deployment() -&gt; AbstractDeployment\n</code></pre>"},{"location":"api/deployments/config/#swerex.deployment.config.FargateDeploymentConfig","title":"FargateDeploymentConfig  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Configuration for running on AWS Fargate.</p> <p>Config:</p> <ul> <li><code>extra</code>: <code>forbid</code></li> </ul> <p>Fields:</p> <ul> <li> <code>image</code>                 (<code>str</code>)             </li> <li> <code>port</code>                 (<code>int</code>)             </li> <li> <code>cluster_name</code>                 (<code>str</code>)             </li> <li> <code>execution_role_prefix</code>                 (<code>str</code>)             </li> <li> <code>task_definition_prefix</code>                 (<code>str</code>)             </li> <li> <code>log_group</code>                 (<code>str | None</code>)             </li> <li> <code>security_group_prefix</code>                 (<code>str</code>)             </li> <li> <code>fargate_args</code>                 (<code>dict[str, str]</code>)             </li> <li> <code>container_timeout</code>                 (<code>float</code>)             </li> <li> <code>runtime_timeout</code>                 (<code>float</code>)             </li> <li> <code>type</code>                 (<code>Literal['fargate']</code>)             </li> </ul>"},{"location":"api/deployments/config/#swerex.deployment.config.FargateDeploymentConfig.image","title":"image  <code>pydantic-field</code>","text":"<pre><code>image: str = 'python:3.11'\n</code></pre>"},{"location":"api/deployments/config/#swerex.deployment.config.FargateDeploymentConfig.port","title":"port  <code>pydantic-field</code>","text":"<pre><code>port: int = 8880\n</code></pre>"},{"location":"api/deployments/config/#swerex.deployment.config.FargateDeploymentConfig.cluster_name","title":"cluster_name  <code>pydantic-field</code>","text":"<pre><code>cluster_name: str = 'swe-rex-cluster'\n</code></pre>"},{"location":"api/deployments/config/#swerex.deployment.config.FargateDeploymentConfig.execution_role_prefix","title":"execution_role_prefix  <code>pydantic-field</code>","text":"<pre><code>execution_role_prefix: str = 'swe-rex-execution-role'\n</code></pre>"},{"location":"api/deployments/config/#swerex.deployment.config.FargateDeploymentConfig.task_definition_prefix","title":"task_definition_prefix  <code>pydantic-field</code>","text":"<pre><code>task_definition_prefix: str = 'swe-rex-task'\n</code></pre>"},{"location":"api/deployments/config/#swerex.deployment.config.FargateDeploymentConfig.log_group","title":"log_group  <code>pydantic-field</code>","text":"<pre><code>log_group: str | None = '/ecs/swe-rex-deployment'\n</code></pre>"},{"location":"api/deployments/config/#swerex.deployment.config.FargateDeploymentConfig.security_group_prefix","title":"security_group_prefix  <code>pydantic-field</code>","text":"<pre><code>security_group_prefix: str = 'swe-rex-deployment-sg'\n</code></pre>"},{"location":"api/deployments/config/#swerex.deployment.config.FargateDeploymentConfig.fargate_args","title":"fargate_args  <code>pydantic-field</code>","text":"<pre><code>fargate_args: dict[str, str] = {}\n</code></pre>"},{"location":"api/deployments/config/#swerex.deployment.config.FargateDeploymentConfig.container_timeout","title":"container_timeout  <code>pydantic-field</code>","text":"<pre><code>container_timeout: float = 60 * 15\n</code></pre>"},{"location":"api/deployments/config/#swerex.deployment.config.FargateDeploymentConfig.runtime_timeout","title":"runtime_timeout  <code>pydantic-field</code>","text":"<pre><code>runtime_timeout: float = 60\n</code></pre>"},{"location":"api/deployments/config/#swerex.deployment.config.FargateDeploymentConfig.type","title":"type  <code>pydantic-field</code>","text":"<pre><code>type: Literal['fargate'] = 'fargate'\n</code></pre> <p>Discriminator for (de)serialization/CLI. Do not change.</p>"},{"location":"api/deployments/config/#swerex.deployment.config.FargateDeploymentConfig.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(extra='forbid')\n</code></pre>"},{"location":"api/deployments/config/#swerex.deployment.config.FargateDeploymentConfig.get_deployment","title":"get_deployment","text":"<pre><code>get_deployment() -&gt; AbstractDeployment\n</code></pre>"},{"location":"api/deployments/config/#swerex.deployment.config.RemoteDeploymentConfig","title":"RemoteDeploymentConfig  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Configuration for <code>RemoteDeployment</code>, a wrapper around <code>RemoteRuntime</code> that can be used to connect to any swerex server.</p> <p>Config:</p> <ul> <li><code>extra</code>: <code>forbid</code></li> </ul> <p>Fields:</p> <ul> <li> <code>auth_token</code>                 (<code>str</code>)             </li> <li> <code>host</code>                 (<code>str</code>)             </li> <li> <code>port</code>                 (<code>int | None</code>)             </li> <li> <code>timeout</code>                 (<code>float</code>)             </li> <li> <code>type</code>                 (<code>Literal['remote']</code>)             </li> </ul>"},{"location":"api/deployments/config/#swerex.deployment.config.RemoteDeploymentConfig.auth_token","title":"auth_token  <code>pydantic-field</code>","text":"<pre><code>auth_token: str\n</code></pre> <p>The token to use for authentication.</p>"},{"location":"api/deployments/config/#swerex.deployment.config.RemoteDeploymentConfig.host","title":"host  <code>pydantic-field</code>","text":"<pre><code>host: str = 'http://127.0.0.1'\n</code></pre> <p>The host to connect to.</p>"},{"location":"api/deployments/config/#swerex.deployment.config.RemoteDeploymentConfig.port","title":"port  <code>pydantic-field</code>","text":"<pre><code>port: int | None = None\n</code></pre> <p>The port to connect to.</p>"},{"location":"api/deployments/config/#swerex.deployment.config.RemoteDeploymentConfig.timeout","title":"timeout  <code>pydantic-field</code>","text":"<pre><code>timeout: float = 0.15\n</code></pre>"},{"location":"api/deployments/config/#swerex.deployment.config.RemoteDeploymentConfig.type","title":"type  <code>pydantic-field</code>","text":"<pre><code>type: Literal['remote'] = 'remote'\n</code></pre> <p>Discriminator for (de)serialization/CLI. Do not change.</p>"},{"location":"api/deployments/config/#swerex.deployment.config.RemoteDeploymentConfig.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(extra='forbid')\n</code></pre>"},{"location":"api/deployments/config/#swerex.deployment.config.RemoteDeploymentConfig.get_deployment","title":"get_deployment","text":"<pre><code>get_deployment() -&gt; AbstractDeployment\n</code></pre>"},{"location":"api/deployments/config/#swerex.deployment.config.DummyDeploymentConfig","title":"DummyDeploymentConfig  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Configuration for <code>DummyDeployment</code>, a deployment that is used for testing.</p> <p>Config:</p> <ul> <li><code>extra</code>: <code>forbid</code></li> </ul> <p>Fields:</p> <ul> <li> <code>type</code>                 (<code>Literal['dummy']</code>)             </li> </ul>"},{"location":"api/deployments/config/#swerex.deployment.config.DummyDeploymentConfig.type","title":"type  <code>pydantic-field</code>","text":"<pre><code>type: Literal['dummy'] = 'dummy'\n</code></pre> <p>Discriminator for (de)serialization/CLI. Do not change.</p>"},{"location":"api/deployments/config/#swerex.deployment.config.DummyDeploymentConfig.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(extra='forbid')\n</code></pre>"},{"location":"api/deployments/config/#swerex.deployment.config.DummyDeploymentConfig.get_deployment","title":"get_deployment","text":"<pre><code>get_deployment() -&gt; AbstractDeployment\n</code></pre>"},{"location":"api/deployments/config/#swerex.deployment.config.DaytonaDeploymentConfig","title":"DaytonaDeploymentConfig  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Configuration for Daytona deployment.</p> <p>Fields:</p> <ul> <li> <code>api_key</code>                 (<code>str</code>)             </li> <li> <code>target</code>                 (<code>str</code>)             </li> <li> <code>port</code>                 (<code>int</code>)             </li> <li> <code>container_timeout</code>                 (<code>float</code>)             </li> <li> <code>runtime_timeout</code>                 (<code>float</code>)             </li> <li> <code>image</code>                 (<code>str</code>)             </li> </ul>"},{"location":"api/deployments/config/#swerex.deployment.config.DaytonaDeploymentConfig.api_key","title":"api_key  <code>pydantic-field</code>","text":"<pre><code>api_key: str = ''\n</code></pre> <p>Daytona API key for authentication</p>"},{"location":"api/deployments/config/#swerex.deployment.config.DaytonaDeploymentConfig.target","title":"target  <code>pydantic-field</code>","text":"<pre><code>target: str = 'us'\n</code></pre> <p>Daytona target region (us, eu, etc.)</p>"},{"location":"api/deployments/config/#swerex.deployment.config.DaytonaDeploymentConfig.port","title":"port  <code>pydantic-field</code>","text":"<pre><code>port: int = 8000\n</code></pre> <p>Port to expose for the SWE Rex server</p>"},{"location":"api/deployments/config/#swerex.deployment.config.DaytonaDeploymentConfig.container_timeout","title":"container_timeout  <code>pydantic-field</code>","text":"<pre><code>container_timeout: float = 60 * 15\n</code></pre> <p>Timeout for the container</p>"},{"location":"api/deployments/config/#swerex.deployment.config.DaytonaDeploymentConfig.runtime_timeout","title":"runtime_timeout  <code>pydantic-field</code>","text":"<pre><code>runtime_timeout: float = 60\n</code></pre> <p>Timeout for the runtime</p>"},{"location":"api/deployments/config/#swerex.deployment.config.DaytonaDeploymentConfig.image","title":"image  <code>pydantic-field</code>","text":"<pre><code>image: str = 'python:3.11'\n</code></pre> <p>Image to use for the sandbox</p>"},{"location":"api/deployments/config/#swerex.deployment.config.DaytonaDeploymentConfig.get_deployment","title":"get_deployment","text":"<pre><code>get_deployment() -&gt; AbstractDeployment\n</code></pre>"},{"location":"api/deployments/config/#swerex.deployment.config.get_deployment","title":"get_deployment","text":"<pre><code>get_deployment(config: DeploymentConfig) -&gt; AbstractDeployment\n</code></pre>"},{"location":"api/deployments/docker/","title":"Docker","text":""},{"location":"api/deployments/docker/#swerex.deployment.docker.DockerDeployment","title":"swerex.deployment.docker.DockerDeployment","text":"<pre><code>DockerDeployment(*, logger: Logger | None = None, **kwargs: Any)\n</code></pre> <p>               Bases: <code>AbstractDeployment</code></p> <p>Deployment to local container image using Docker or Podman.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Keyword arguments (see <code>DockerDeploymentConfig</code> for details).</p> <code>{}</code> Source code in <code>swerex/deployment/docker.py</code> <pre><code>def __init__(\n    self,\n    *,\n    logger: logging.Logger | None = None,\n    **kwargs: Any,\n):\n    \"\"\"Deployment to local container image using Docker or Podman.\n\n    Args:\n        **kwargs: Keyword arguments (see `DockerDeploymentConfig` for details).\n    \"\"\"\n    self._config = DockerDeploymentConfig(**kwargs)\n    self._runtime: RemoteRuntime | None = None\n    self._container_process = None\n    self._container_name = None\n    self.logger = logger or get_logger(\"rex-deploy\")\n    self._runtime_timeout = 0.15\n    self._hooks = CombinedDeploymentHook()\n</code></pre>"},{"location":"api/deployments/docker/#swerex.deployment.docker.DockerDeployment.container_name","title":"container_name  <code>property</code>","text":"<pre><code>container_name: str | None\n</code></pre>"},{"location":"api/deployments/docker/#swerex.deployment.docker.DockerDeployment.glibc_dockerfile","title":"glibc_dockerfile  <code>property</code>","text":"<pre><code>glibc_dockerfile: str\n</code></pre>"},{"location":"api/deployments/docker/#swerex.deployment.docker.DockerDeployment.logger","title":"logger  <code>instance-attribute</code>","text":"<pre><code>logger = logger or get_logger('rex-deploy')\n</code></pre>"},{"location":"api/deployments/docker/#swerex.deployment.docker.DockerDeployment.runtime","title":"runtime  <code>property</code>","text":"<pre><code>runtime: RemoteRuntime\n</code></pre> <p>Returns the runtime if running.</p> <p>Raises:</p> Type Description <code>DeploymentNotStartedError</code> <p>If the deployment was not started.</p>"},{"location":"api/deployments/docker/#swerex.deployment.docker.DockerDeployment.add_hook","title":"add_hook","text":"<pre><code>add_hook(hook: DeploymentHook)\n</code></pre> Source code in <code>swerex/deployment/docker.py</code> <pre><code>def add_hook(self, hook: DeploymentHook):\n    self._hooks.add_hook(hook)\n</code></pre>"},{"location":"api/deployments/docker/#swerex.deployment.docker.DockerDeployment.from_config","title":"from_config  <code>classmethod</code>","text":"<pre><code>from_config(config: DockerDeploymentConfig) -&gt; Self\n</code></pre> Source code in <code>swerex/deployment/docker.py</code> <pre><code>@classmethod\ndef from_config(cls, config: DockerDeploymentConfig) -&gt; Self:\n    return cls(**config.model_dump())\n</code></pre>"},{"location":"api/deployments/docker/#swerex.deployment.docker.DockerDeployment.is_alive","title":"is_alive  <code>async</code>","text":"<pre><code>is_alive(*, timeout: float | None = None) -&gt; IsAliveResponse\n</code></pre> <p>Checks if the runtime is alive. The return value can be tested with bool().</p> <p>Raises:</p> Type Description <code>DeploymentNotStartedError</code> <p>If the deployment was not started.</p> Source code in <code>swerex/deployment/docker.py</code> <pre><code>async def is_alive(self, *, timeout: float | None = None) -&gt; IsAliveResponse:\n    \"\"\"Checks if the runtime is alive. The return value can be\n    tested with bool().\n\n    Raises:\n        DeploymentNotStartedError: If the deployment was not started.\n    \"\"\"\n    if self._runtime is None:\n        msg = \"Runtime not started\"\n        raise RuntimeError(msg)\n    if self._container_process is None:\n        msg = \"Container process not started\"\n        raise RuntimeError(msg)\n    if self._container_process.poll() is not None:\n        msg = \"Container process terminated.\"\n        output = \"stdout:\\n\" + self._container_process.stdout.read().decode()  # type: ignore\n        output += \"\\nstderr:\\n\" + self._container_process.stderr.read().decode()  # type: ignore\n        msg += \"\\n\" + output\n        raise RuntimeError(msg)\n    return await self._runtime.is_alive(timeout=timeout)\n</code></pre>"},{"location":"api/deployments/docker/#swerex.deployment.docker.DockerDeployment.start","title":"start  <code>async</code>","text":"<pre><code>start()\n</code></pre> <p>Starts the runtime.</p> Source code in <code>swerex/deployment/docker.py</code> <pre><code>async def start(self):\n    \"\"\"Starts the runtime.\"\"\"\n    self._pull_image()\n    if self._config.python_standalone_dir:\n        image_id = self._build_image()\n    else:\n        image_id = self._config.image\n    if self._config.port is None:\n        self._config.port = find_free_port()\n    assert self._container_name is None\n    self._container_name = self._get_container_name()\n    token = self._get_token()\n    platform_arg = []\n    if self._config.platform is not None:\n        platform_arg = [\"--platform\", self._config.platform]\n    rm_arg = []\n    if self._config.remove_container:\n        rm_arg = [\"--rm\"]\n    cmds = [\n        self._config.container_runtime,\n        \"run\",\n        *rm_arg,\n        \"-p\",\n        f\"{self._config.port}:8000\",\n        *platform_arg,\n        *self._config.docker_args,\n        \"--name\",\n        self._container_name,\n        image_id,\n        *self._get_swerex_start_cmd(token),\n    ]\n    cmd_str = shlex.join(cmds)\n    self.logger.info(\n        f\"Starting container {self._container_name} with image {self._config.image} serving on port {self._config.port}\"\n    )\n    self.logger.debug(f\"Command: {cmd_str!r}\")\n    # shell=True required for &amp;&amp; etc.\n    self._container_process = subprocess.Popen(cmds, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    self._hooks.on_custom_step(\"Starting runtime\")\n    self.logger.info(f\"Starting runtime at {self._config.port}\")\n    self._runtime = RemoteRuntime.from_config(\n        RemoteRuntimeConfig(port=self._config.port, timeout=self._runtime_timeout, auth_token=token)\n    )\n    t0 = time.time()\n    await self._wait_until_alive(timeout=self._config.startup_timeout)\n    self.logger.info(f\"Runtime started in {time.time() - t0:.2f}s\")\n</code></pre>"},{"location":"api/deployments/docker/#swerex.deployment.docker.DockerDeployment.stop","title":"stop  <code>async</code>","text":"<pre><code>stop()\n</code></pre> <p>Stops the runtime.</p> Source code in <code>swerex/deployment/docker.py</code> <pre><code>async def stop(self):\n    \"\"\"Stops the runtime.\"\"\"\n    if self._runtime is not None:\n        await self._runtime.close()\n        self._runtime = None\n\n    if self._container_process is not None:\n        try:\n            subprocess.check_call(\n                [self._config.container_runtime, \"kill\", self._container_name],  # type: ignore\n                stdout=subprocess.DEVNULL,\n                stderr=subprocess.DEVNULL,\n                timeout=10,\n            )\n        except (subprocess.CalledProcessError, subprocess.TimeoutExpired) as e:\n            self.logger.warning(\n                f\"Failed to kill container {self._container_name}: {e}. Will try harder.\",\n                exc_info=False,\n            )\n        for _ in range(3):\n            self._container_process.kill()\n            try:\n                self._container_process.wait(timeout=5)\n                break\n            except subprocess.TimeoutExpired:\n                continue\n        else:\n            self.logger.warning(f\"Failed to kill container {self._container_name} with SIGKILL\")\n\n        self._container_process = None\n        self._container_name = None\n\n    if self._config.remove_images:\n        if _is_image_available(self._config.image, self._config.container_runtime):\n            self.logger.info(f\"Removing image {self._config.image}\")\n            try:\n                _remove_image(self._config.image, self._config.container_runtime)\n            except subprocess.CalledProcessError:\n                self.logger.error(f\"Failed to remove image {self._config.image}\", exc_info=True)\n</code></pre>"},{"location":"api/deployments/dummy/","title":"Dummy","text":""},{"location":"api/deployments/dummy/#swerex.deployment.dummy.DummyDeployment","title":"swerex.deployment.dummy.DummyDeployment","text":"<pre><code>DummyDeployment(*, logger: Logger | None = None, **kwargs: Any)\n</code></pre> <p>               Bases: <code>AbstractDeployment</code></p> <p>This deployment returns blank or predefined outputs. Useful for testing.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Keyword arguments (see <code>DummyDeploymentConfig</code> for details).</p> <code>{}</code> Source code in <code>swerex/deployment/dummy.py</code> <pre><code>def __init__(self, *, logger: logging.Logger | None = None, **kwargs: Any):\n    \"\"\"This deployment returns blank or predefined outputs.\n    Useful for testing.\n\n    Args:\n        **kwargs: Keyword arguments (see `DummyDeploymentConfig` for details).\n    \"\"\"\n    self._config = DummyDeploymentConfig(**kwargs)\n    self.logger = logger or get_logger(\"rex-deploy\")\n    self._runtime = DummyRuntime(logger=self.logger)  # type: ignore\n    self._hooks = CombinedDeploymentHook()\n</code></pre>"},{"location":"api/deployments/dummy/#swerex.deployment.dummy.DummyDeployment.logger","title":"logger  <code>instance-attribute</code>","text":"<pre><code>logger = logger or get_logger('rex-deploy')\n</code></pre>"},{"location":"api/deployments/dummy/#swerex.deployment.dummy.DummyDeployment.runtime","title":"runtime  <code>property</code> <code>writable</code>","text":"<pre><code>runtime: DummyRuntime\n</code></pre>"},{"location":"api/deployments/dummy/#swerex.deployment.dummy.DummyDeployment.add_hook","title":"add_hook","text":"<pre><code>add_hook(hook: DeploymentHook)\n</code></pre> Source code in <code>swerex/deployment/dummy.py</code> <pre><code>def add_hook(self, hook: DeploymentHook):\n    self._hooks.add_hook(hook)\n</code></pre>"},{"location":"api/deployments/dummy/#swerex.deployment.dummy.DummyDeployment.from_config","title":"from_config  <code>classmethod</code>","text":"<pre><code>from_config(config: DummyDeploymentConfig) -&gt; Self\n</code></pre> Source code in <code>swerex/deployment/dummy.py</code> <pre><code>@classmethod\ndef from_config(cls, config: DummyDeploymentConfig) -&gt; Self:\n    return cls(**config.model_dump())\n</code></pre>"},{"location":"api/deployments/dummy/#swerex.deployment.dummy.DummyDeployment.is_alive","title":"is_alive  <code>async</code>","text":"<pre><code>is_alive(*, timeout: float | None = None) -&gt; IsAliveResponse\n</code></pre> Source code in <code>swerex/deployment/dummy.py</code> <pre><code>async def is_alive(self, *, timeout: float | None = None) -&gt; IsAliveResponse:\n    return IsAliveResponse(is_alive=True)\n</code></pre>"},{"location":"api/deployments/dummy/#swerex.deployment.dummy.DummyDeployment.start","title":"start  <code>async</code>","text":"<pre><code>start()\n</code></pre> Source code in <code>swerex/deployment/dummy.py</code> <pre><code>async def start(self):\n    pass\n</code></pre>"},{"location":"api/deployments/dummy/#swerex.deployment.dummy.DummyDeployment.stop","title":"stop  <code>async</code>","text":"<pre><code>stop()\n</code></pre> Source code in <code>swerex/deployment/dummy.py</code> <pre><code>async def stop(self):\n    pass\n</code></pre>"},{"location":"api/deployments/fargate/","title":"Fargate","text":"<p>Warning</p> <p>This deployment is currently in alpha stage. Expect breaking changes.</p>"},{"location":"api/deployments/fargate/#aws-resource-cleanup","title":"AWS Resource Cleanup","text":"<p>The Fargate deployment creates several AWS resources that persist even after your deployment stops. These resources include:</p> <ul> <li>ECS Clusters</li> <li>Task Definitions </li> <li>Security Groups</li> <li>IAM Roles</li> </ul> <p>All resources created by the Fargate deployment are tagged with <code>origin=swe-rex-deployment-auto</code> for tracking purposes.</p>"},{"location":"api/deployments/fargate/#cleaning-up-resources","title":"Cleaning Up Resources","text":"<p>To clean up all AWS resources created by the Fargate deployment, you can use the built-in teardown utility:</p> <pre><code>python -m swerex.utils.aws_teardown\n</code></pre> <p>This utility will:</p> <ol> <li>Preview all resources tagged with <code>origin=swe-rex-deployment-auto</code></li> <li>Request confirmation before deletion</li> <li>Delete resources in the correct order to handle dependencies</li> <li>Provide status updates during the cleanup process</li> </ol> <p>Tip</p> <p>It's recommended to run the teardown utility periodically to avoid accumulating unused AWS resources, which may incur costs. Running the fargate deployment again will recreate the necessary resources on the fly.</p>"},{"location":"api/deployments/fargate/#swerex.deployment.fargate.FargateDeployment","title":"swerex.deployment.fargate.FargateDeployment","text":"<pre><code>FargateDeployment(*, logger: Logger | None = None, **kwargs: Any)\n</code></pre> <p>               Bases: <code>AbstractDeployment</code></p> Source code in <code>swerex/deployment/fargate.py</code> <pre><code>def __init__(\n    self,\n    *,\n    logger: logging.Logger | None = None,\n    **kwargs: Any,\n):\n    self._config = FargateDeploymentConfig(**kwargs)\n    self._runtime: RemoteRuntime | None = None\n    self._container_process = None\n    self._container_name = None\n    self.logger = logger or get_logger(\"rex-deploy\")\n    # we need to setup ecs and ec2 to run containers\n    self._cluster_arn = None\n    self._execution_role_arn = None\n    self._vpc_id = None\n    self._subnet_id = None\n    self._task_arn = None\n    self._security_group_id = None\n    self._hooks = CombinedDeploymentHook()\n</code></pre>"},{"location":"api/deployments/fargate/#swerex.deployment.fargate.FargateDeployment.container_name","title":"container_name  <code>property</code>","text":"<pre><code>container_name: str | None\n</code></pre>"},{"location":"api/deployments/fargate/#swerex.deployment.fargate.FargateDeployment.logger","title":"logger  <code>instance-attribute</code>","text":"<pre><code>logger = logger or get_logger('rex-deploy')\n</code></pre>"},{"location":"api/deployments/fargate/#swerex.deployment.fargate.FargateDeployment.runtime","title":"runtime  <code>property</code>","text":"<pre><code>runtime: RemoteRuntime\n</code></pre> <p>Returns the runtime if running.</p> <p>Raises:</p> Type Description <code>DeploymentNotStartedError</code> <p>If the deployment was not started.</p>"},{"location":"api/deployments/fargate/#swerex.deployment.fargate.FargateDeployment.add_hook","title":"add_hook","text":"<pre><code>add_hook(hook: DeploymentHook)\n</code></pre> Source code in <code>swerex/deployment/fargate.py</code> <pre><code>def add_hook(self, hook: DeploymentHook):\n    self._hooks.add_hook(hook)\n</code></pre>"},{"location":"api/deployments/fargate/#swerex.deployment.fargate.FargateDeployment.from_config","title":"from_config  <code>classmethod</code>","text":"<pre><code>from_config(config: FargateDeploymentConfig) -&gt; Self\n</code></pre> Source code in <code>swerex/deployment/fargate.py</code> <pre><code>@classmethod\ndef from_config(cls, config: FargateDeploymentConfig) -&gt; Self:\n    return cls(**config.model_dump())\n</code></pre>"},{"location":"api/deployments/fargate/#swerex.deployment.fargate.FargateDeployment.is_alive","title":"is_alive  <code>async</code>","text":"<pre><code>is_alive(*, timeout: float | None = None) -&gt; IsAliveResponse\n</code></pre> <p>Checks if the runtime is alive. The return value can be tested with bool().</p> <p>Raises:</p> Type Description <code>DeploymentNotStartedError</code> <p>If the deployment was not started.</p> Source code in <code>swerex/deployment/fargate.py</code> <pre><code>async def is_alive(self, *, timeout: float | None = None) -&gt; IsAliveResponse:\n    \"\"\"Checks if the runtime is alive. The return value can be\n    tested with bool().\n\n    Raises:\n        DeploymentNotStartedError: If the deployment was not started.\n    \"\"\"\n    if self._runtime is None or self._task_arn is None:\n        raise DeploymentNotStartedError()\n    else:\n        # check if the task is running\n        ecs_client = boto3.client(\"ecs\")\n        task_details = ecs_client.describe_tasks(cluster=self._cluster_arn, tasks=[self._task_arn])\n        if task_details[\"tasks\"][0][\"lastStatus\"] != \"RUNNING\":\n            msg = f\"Container process not running: {task_details['tasks'][0]['lastStatus']}\"\n            raise RuntimeError(msg)\n    return await self._runtime.is_alive(timeout=timeout)\n</code></pre>"},{"location":"api/deployments/fargate/#swerex.deployment.fargate.FargateDeployment.start","title":"start  <code>async</code>","text":"<pre><code>start()\n</code></pre> <p>Starts the runtime.</p> Source code in <code>swerex/deployment/fargate.py</code> <pre><code>async def start(\n    self,\n):\n    \"\"\"Starts the runtime.\"\"\"\n    self._init_aws()\n    self._container_name = self._get_container_name()\n    self.logger.info(f\"Starting runtime with container name {self._container_name}\")\n    token = self._get_token()\n    self._task_arn = run_fargate_task(\n        command=self._get_command(token=token),\n        name=self._container_name,\n        task_definition_arn=self._task_definition[\"taskDefinitionArn\"],\n        subnet_id=self._subnet_id,\n        security_group_id=self._security_group_id,\n        cluster_arn=self._cluster_arn,\n        **self._config.fargate_args,\n    )\n    self.logger.info(f\"Container task submitted: {self._task_arn} - waiting for it to start...\")\n    # wait until the container is running\n    t0 = time.time()\n    ecs_client = boto3.client(\"ecs\")\n    waiter = ecs_client.get_waiter(\"tasks_running\")\n    waiter.wait(cluster=self._cluster_arn, tasks=[self._task_arn])\n    self.logger.info(f\"Fargate container started in {time.time() - t0:.2f}s\")\n    if self._config.log_group:\n        try:\n            log_url = get_cloudwatch_log_url(\n                task_arn=self._task_arn,\n                task_definition=self._task_definition,\n                container_name=self._container_name,\n            )\n            self.logger.info(f\"Monitor logs at: {log_url}\")\n        except Exception as e:\n            self.logger.warning(f\"Failed to get CloudWatch Logs URL: {str(e)}\")\n    public_ip = get_public_ip(self._task_arn, self._cluster_arn)\n    self.logger.info(f\"Container public IP: {public_ip}\")\n    self._runtime = RemoteRuntime(host=public_ip, port=self._config.port, auth_token=token, logger=self.logger)\n    t0 = time.time()\n    await self._wait_until_alive(timeout=self._config.runtime_timeout)\n    self.logger.info(f\"Runtime started in {time.time() - t0:.2f}s\")\n</code></pre>"},{"location":"api/deployments/fargate/#swerex.deployment.fargate.FargateDeployment.stop","title":"stop  <code>async</code>","text":"<pre><code>stop()\n</code></pre> <p>Stops the runtime.</p> Source code in <code>swerex/deployment/fargate.py</code> <pre><code>async def stop(self):\n    \"\"\"Stops the runtime.\"\"\"\n    if self._runtime is not None:\n        await self._runtime.close()\n        self._runtime = None\n    if self._task_arn is not None:\n        ecs_client = boto3.client(\"ecs\")\n        ecs_client.stop_task(task=self._task_arn, cluster=self._cluster_arn)\n    self._task_arn = None\n    self._container_name = None\n</code></pre>"},{"location":"api/deployments/local/","title":"Local","text":""},{"location":"api/deployments/local/#swerex.deployment.local.LocalDeployment","title":"swerex.deployment.local.LocalDeployment","text":"<pre><code>LocalDeployment(*, logger: Logger | None = None, **kwargs: Any)\n</code></pre> <p>               Bases: <code>AbstractDeployment</code></p> <p>The most boring of the deployment classes. This class does nothing but wrap around <code>Runtime</code> so you can switch out your deployment method.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Keyword arguments (see <code>LocalDeploymentConfig</code> for details).</p> <code>{}</code> Source code in <code>swerex/deployment/local.py</code> <pre><code>def __init__(\n    self,\n    *,\n    logger: logging.Logger | None = None,\n    **kwargs: Any,\n):\n    \"\"\"The most boring of the deployment classes.\n    This class does nothing but wrap around `Runtime` so you can switch out\n    your deployment method.\n\n    Args:\n        **kwargs: Keyword arguments (see `LocalDeploymentConfig` for details).\n    \"\"\"\n    self._runtime = None\n    self.logger = logger or get_logger(\"rex-deploy\")\n    self._config = LocalDeploymentConfig(**kwargs)\n    self._hooks = CombinedDeploymentHook()\n</code></pre>"},{"location":"api/deployments/local/#swerex.deployment.local.LocalDeployment.logger","title":"logger  <code>instance-attribute</code>","text":"<pre><code>logger = logger or get_logger('rex-deploy')\n</code></pre>"},{"location":"api/deployments/local/#swerex.deployment.local.LocalDeployment.runtime","title":"runtime  <code>property</code>","text":"<pre><code>runtime: LocalRuntime\n</code></pre> <p>Returns the runtime if running.</p> <p>Raises:</p> Type Description <code>DeploymentNotStartedError</code> <p>If the deployment was not started.</p>"},{"location":"api/deployments/local/#swerex.deployment.local.LocalDeployment.add_hook","title":"add_hook","text":"<pre><code>add_hook(hook: DeploymentHook)\n</code></pre> Source code in <code>swerex/deployment/local.py</code> <pre><code>def add_hook(self, hook: DeploymentHook):\n    self._hooks.add_hook(hook)\n</code></pre>"},{"location":"api/deployments/local/#swerex.deployment.local.LocalDeployment.from_config","title":"from_config  <code>classmethod</code>","text":"<pre><code>from_config(config: LocalDeploymentConfig) -&gt; Self\n</code></pre> Source code in <code>swerex/deployment/local.py</code> <pre><code>@classmethod\ndef from_config(cls, config: LocalDeploymentConfig) -&gt; Self:\n    return cls(**config.model_dump())\n</code></pre>"},{"location":"api/deployments/local/#swerex.deployment.local.LocalDeployment.is_alive","title":"is_alive  <code>async</code>","text":"<pre><code>is_alive(*, timeout: float | None = None) -&gt; IsAliveResponse\n</code></pre> <p>Checks if the runtime is alive. The return value can be tested with bool().</p> <p>Raises:</p> Type Description <code>DeploymentNotStartedError</code> <p>If the deployment was not started.</p> Source code in <code>swerex/deployment/local.py</code> <pre><code>async def is_alive(self, *, timeout: float | None = None) -&gt; IsAliveResponse:\n    \"\"\"Checks if the runtime is alive. The return value can be\n    tested with bool().\n\n    Raises:\n        DeploymentNotStartedError: If the deployment was not started.\n    \"\"\"\n    if self._runtime is None:\n        return IsAliveResponse(is_alive=False, message=\"Runtime is None.\")\n    return await self._runtime.is_alive(timeout=timeout)\n</code></pre>"},{"location":"api/deployments/local/#swerex.deployment.local.LocalDeployment.start","title":"start  <code>async</code>","text":"<pre><code>start()\n</code></pre> <p>Starts the runtime.</p> Source code in <code>swerex/deployment/local.py</code> <pre><code>async def start(self):\n    \"\"\"Starts the runtime.\"\"\"\n    self._runtime = LocalRuntime(logger=self.logger)\n</code></pre>"},{"location":"api/deployments/local/#swerex.deployment.local.LocalDeployment.stop","title":"stop  <code>async</code>","text":"<pre><code>stop()\n</code></pre> <p>Stops the runtime.</p> Source code in <code>swerex/deployment/local.py</code> <pre><code>async def stop(self):\n    \"\"\"Stops the runtime.\"\"\"\n    if self._runtime is not None:\n        await self._runtime.close()\n        self._runtime = None\n</code></pre>"},{"location":"api/deployments/modal/","title":"Modal","text":""},{"location":"api/deployments/modal/#swerex.deployment.modal.ModalDeployment","title":"swerex.deployment.modal.ModalDeployment","text":"<pre><code>ModalDeployment(*, logger: Logger | None = None, image: str | Image | PurePath, startup_timeout: float = 0.4, runtime_timeout: float = 3600.0, modal_sandbox_kwargs: dict[str, Any] | None = None, install_pipx: bool = True, deployment_timeout: float = 3600.0)\n</code></pre> <p>               Bases: <code>AbstractDeployment</code></p> <p>Deployment for modal.com. The deployment will only start when the <code>start</code> method is being called.</p> <p>Parameters:</p> Name Type Description Default <code>image</code> <code>str | Image | PurePath</code> <p>Image to use for the deployment. One of the following: 1. <code>modal.Image</code> object 2. Path to a Dockerfile 3. Dockerhub image name (e.g. <code>python:3.11-slim</code>) 4. ECR image name (e.g. <code>123456789012.dkr.ecr.us-east-1.amazonaws.com/my-image:tag</code>)</p> required <code>startup_timeout</code> <code>float</code> <p>The time to wait for the runtime to start.</p> <code>0.4</code> <code>runtime_timeout</code> <code>float</code> <p>The runtime timeout.</p> <code>3600.0</code> <code>deployment_timeout</code> <code>float</code> <p>The deployment timeout.</p> <code>3600.0</code> <code>modal_sandbox_kwargs</code> <code>dict[str, Any] | None</code> <p>Additional arguments to pass to <code>modal.Sandbox.create</code></p> <code>None</code> Source code in <code>swerex/deployment/modal.py</code> <pre><code>def __init__(\n    self,\n    *,\n    logger: logging.Logger | None = None,\n    image: str | modal.Image | PurePath,\n    startup_timeout: float = 0.4,\n    runtime_timeout: float = 3600.0,\n    modal_sandbox_kwargs: dict[str, Any] | None = None,\n    install_pipx: bool = True,\n    deployment_timeout: float = 3600.0,\n):\n    \"\"\"Deployment for modal.com. The deployment will only start when the\n    `start` method is being called.\n\n    Args:\n        image: Image to use for the deployment. One of the following:\n            1. `modal.Image` object\n            2. Path to a Dockerfile\n            3. Dockerhub image name (e.g. `python:3.11-slim`)\n            4. ECR image name (e.g. `123456789012.dkr.ecr.us-east-1.amazonaws.com/my-image:tag`)\n        startup_timeout: The time to wait for the runtime to start.\n        runtime_timeout: The runtime timeout.\n        deployment_timeout: The deployment timeout.\n        modal_sandbox_kwargs: Additional arguments to pass to `modal.Sandbox.create`\n    \"\"\"\n    self._image = _ImageBuilder(install_pipx=install_pipx, logger=logger).auto(image)\n    self._runtime: RemoteRuntime | None = None\n    self._startup_timeout = startup_timeout\n    self._sandbox: modal.Sandbox | None = None\n    self._port = 8880\n    self.logger = logger or get_logger(\"rex-deploy\")\n    self._app = modal.App.lookup(\"swe-rex\", create_if_missing=True)\n    self._user = _get_modal_user()\n    self._runtime_timeout = runtime_timeout\n    self._deployment_timeout = deployment_timeout\n    if modal_sandbox_kwargs is None:\n        modal_sandbox_kwargs = {}\n    self._modal_kwargs = modal_sandbox_kwargs\n    self._hooks = CombinedDeploymentHook()\n</code></pre>"},{"location":"api/deployments/modal/#swerex.deployment.modal.ModalDeployment.app","title":"app  <code>property</code>","text":"<pre><code>app: App\n</code></pre> <p>Returns the modal app</p> <p>Raises:</p> Type Description <code>DeploymentNotStartedError</code> <p>If the deployment is not started.</p>"},{"location":"api/deployments/modal/#swerex.deployment.modal.ModalDeployment.logger","title":"logger  <code>instance-attribute</code>","text":"<pre><code>logger = logger or get_logger('rex-deploy')\n</code></pre>"},{"location":"api/deployments/modal/#swerex.deployment.modal.ModalDeployment.runtime","title":"runtime  <code>property</code>","text":"<pre><code>runtime: RemoteRuntime\n</code></pre> <p>Returns the runtime if running.</p> <p>Raises:</p> Type Description <code>DeploymentNotStartedError</code> <p>If the deployment was not started.</p>"},{"location":"api/deployments/modal/#swerex.deployment.modal.ModalDeployment.sandbox","title":"sandbox  <code>property</code>","text":"<pre><code>sandbox: Sandbox\n</code></pre> <p>Returns the modal sandbox</p> <p>Raises:</p> Type Description <code>DeploymentNotStartedError</code> <p>If the deployment is not started.</p>"},{"location":"api/deployments/modal/#swerex.deployment.modal.ModalDeployment.add_hook","title":"add_hook","text":"<pre><code>add_hook(hook: DeploymentHook)\n</code></pre> Source code in <code>swerex/deployment/modal.py</code> <pre><code>def add_hook(self, hook: DeploymentHook):\n    self._hooks.add_hook(hook)\n</code></pre>"},{"location":"api/deployments/modal/#swerex.deployment.modal.ModalDeployment.from_config","title":"from_config  <code>classmethod</code>","text":"<pre><code>from_config(config: ModalDeploymentConfig) -&gt; Self\n</code></pre> Source code in <code>swerex/deployment/modal.py</code> <pre><code>@classmethod\ndef from_config(cls, config: ModalDeploymentConfig) -&gt; Self:\n    return cls(\n        image=config.image,\n        install_pipx=config.install_pipx,\n        startup_timeout=config.startup_timeout,\n        runtime_timeout=config.runtime_timeout,\n        deployment_timeout=config.deployment_timeout,\n        modal_sandbox_kwargs=config.modal_sandbox_kwargs,\n    )\n</code></pre>"},{"location":"api/deployments/modal/#swerex.deployment.modal.ModalDeployment.get_modal_log_url","title":"get_modal_log_url  <code>async</code>","text":"<pre><code>get_modal_log_url() -&gt; str\n</code></pre> <p>Returns URL to modal logs</p> <p>Raises:</p> Type Description <code>DeploymentNotStartedError</code> <p>If the deployment was not started.</p> Source code in <code>swerex/deployment/modal.py</code> <pre><code>async def get_modal_log_url(self) -&gt; str:\n    \"\"\"Returns URL to modal logs\n\n    Raises:\n        DeploymentNotStartedError: If the deployment was not started.\n    \"\"\"\n    return f\"https://modal.com/apps/{self._user}/main/deployed/{self.app.name}?activeTab=logs&amp;taskId={await self.sandbox._get_task_id.aio()}\"\n</code></pre>"},{"location":"api/deployments/modal/#swerex.deployment.modal.ModalDeployment.is_alive","title":"is_alive  <code>async</code>","text":"<pre><code>is_alive(*, timeout: float | None = None) -&gt; IsAliveResponse\n</code></pre> <p>Checks if the runtime is alive. The return value can be tested with bool().</p> <p>Raises:</p> Type Description <code>DeploymentNotStartedError</code> <p>If the deployment was not started.</p> Source code in <code>swerex/deployment/modal.py</code> <pre><code>async def is_alive(self, *, timeout: float | None = None) -&gt; IsAliveResponse:\n    \"\"\"Checks if the runtime is alive. The return value can be\n    tested with bool().\n\n    Raises:\n        DeploymentNotStartedError: If the deployment was not started.\n    \"\"\"\n    if self._runtime is None or self._sandbox is None:\n        raise DeploymentNotStartedError()\n    exit_code = await self._sandbox.poll.aio()\n    if exit_code is not None:\n        msg = \"Container process terminated.\"\n        output = \"stdout:\\n\" + await self._sandbox.stdout.read.aio()  # type: ignore\n        output += \"\\nstderr:\\n\" + await self._sandbox.stderr.read.aio()  # type: ignore\n        msg += \"\\n\" + output\n        raise RuntimeError(msg)\n    return await self._runtime.is_alive(timeout=timeout)\n</code></pre>"},{"location":"api/deployments/modal/#swerex.deployment.modal.ModalDeployment.start","title":"start  <code>async</code>","text":"<pre><code>start()\n</code></pre> <p>Starts the runtime.</p> Source code in <code>swerex/deployment/modal.py</code> <pre><code>async def start(\n    self,\n):\n    \"\"\"Starts the runtime.\"\"\"\n    if self._runtime is not None and self._sandbox is not None:\n        self.logger.warning(\"Deployment is already started. Ignoring duplicate start() call.\")\n        return\n\n    self.logger.info(\"Starting modal sandbox\")\n    self._hooks.on_custom_step(\"Starting modal sandbox\")\n    t0 = time.time()\n    token = self._get_token()\n    self._sandbox = await modal.Sandbox.create.aio(\n        \"/usr/bin/env\",\n        \"bash\",\n        \"-c\",\n        self._start_swerex_cmd(token),\n        image=self._image,\n        timeout=int(self._deployment_timeout),\n        unencrypted_ports=[self._port],\n        app=self._app,\n        **self._modal_kwargs,\n    )\n    tunnels = await self._sandbox.tunnels.aio()\n    tunnel = tunnels[self._port]\n    elapsed_sandbox_creation = time.time() - t0\n    self.logger.info(f\"Sandbox ({self._sandbox.object_id}) created in {elapsed_sandbox_creation:.2f}s\")\n    self.logger.info(f\"Check sandbox logs at {await self.get_modal_log_url()}\")\n    self.logger.info(f\"Sandbox created with id {self._sandbox.object_id}\")\n    await asyncio.sleep(1)\n    self.logger.info(f\"Starting runtime at {tunnel.url}\")\n    self._hooks.on_custom_step(\"Starting runtime\")\n    self._runtime = RemoteRuntime(\n        host=tunnel.url, timeout=self._runtime_timeout, auth_token=token, logger=self.logger\n    )\n    remaining_startup_timeout = max(0, self._startup_timeout - elapsed_sandbox_creation)\n    t1 = time.time()\n    await self._wait_until_alive(timeout=remaining_startup_timeout)\n    self.logger.info(f\"Runtime started in {time.time() - t1:.2f}s\")\n</code></pre>"},{"location":"api/deployments/modal/#swerex.deployment.modal.ModalDeployment.stop","title":"stop  <code>async</code>","text":"<pre><code>stop()\n</code></pre> <p>Stops the runtime.</p> Source code in <code>swerex/deployment/modal.py</code> <pre><code>async def stop(self):\n    \"\"\"Stops the runtime.\"\"\"\n    if self._runtime is not None:\n        await self._runtime.close()\n        self._runtime = None\n    if self._sandbox is not None:\n        exit_code = await self._sandbox.poll.aio()\n        if exit_code is not None:\n            await self._sandbox.terminate.aio()\n    self._sandbox = None\n    self._app = None\n</code></pre>"},{"location":"api/deployments/remote/","title":"Remote","text":""},{"location":"api/deployments/remote/#swerex.deployment.remote.RemoteDeployment","title":"swerex.deployment.remote.RemoteDeployment","text":"<pre><code>RemoteDeployment(*, logger: Logger | None = None, **kwargs: Any)\n</code></pre> <p>               Bases: <code>AbstractDeployment</code></p> <p>This deployment is only a thin wrapper around the <code>RemoteRuntime</code>. Use this if you have deployed a runtime somewhere else but want to interact with it through the <code>AbstractDeployment</code> interface. For example, if you have an agent that you usually use with a <code>DocerkDeployment</code> interface, you sometimes might want to manually start a docker container for debugging purposes. Then you can use this deployment to explicitly connect to your manually started runtime.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Keyword arguments (see <code>RemoteDeploymentConfig</code> for details).</p> <code>{}</code> Source code in <code>swerex/deployment/remote.py</code> <pre><code>def __init__(self, *, logger: logging.Logger | None = None, **kwargs: Any):\n    \"\"\"This deployment is only a thin wrapper around the `RemoteRuntime`.\n    Use this if you have deployed a runtime somewhere else but want to interact with it\n    through the `AbstractDeployment` interface.\n    For example, if you have an agent that you usually use with a `DocerkDeployment` interface,\n    you sometimes might want to manually start a docker container for debugging purposes.\n    Then you can use this deployment to explicitly connect to your manually started runtime.\n\n    Args:\n        **kwargs: Keyword arguments (see `RemoteDeploymentConfig` for details).\n    \"\"\"\n    self._config = RemoteDeploymentConfig(**kwargs)\n    self._runtime: RemoteRuntime | None = None\n    self.logger = logger or get_logger(\"rex-deploy\")\n    self._hooks = CombinedDeploymentHook()\n</code></pre>"},{"location":"api/deployments/remote/#swerex.deployment.remote.RemoteDeployment.logger","title":"logger  <code>instance-attribute</code>","text":"<pre><code>logger = logger or get_logger('rex-deploy')\n</code></pre>"},{"location":"api/deployments/remote/#swerex.deployment.remote.RemoteDeployment.runtime","title":"runtime  <code>property</code>","text":"<pre><code>runtime: RemoteRuntime\n</code></pre> <p>Returns the runtime if running.</p> <p>Raises:</p> Type Description <code>DeploymentNotStartedError</code> <p>If the deployment was not started.</p>"},{"location":"api/deployments/remote/#swerex.deployment.remote.RemoteDeployment.add_hook","title":"add_hook","text":"<pre><code>add_hook(hook: DeploymentHook)\n</code></pre> Source code in <code>swerex/deployment/remote.py</code> <pre><code>def add_hook(self, hook: DeploymentHook):\n    self._hooks.add_hook(hook)\n</code></pre>"},{"location":"api/deployments/remote/#swerex.deployment.remote.RemoteDeployment.from_config","title":"from_config  <code>classmethod</code>","text":"<pre><code>from_config(config: RemoteDeploymentConfig) -&gt; Self\n</code></pre> Source code in <code>swerex/deployment/remote.py</code> <pre><code>@classmethod\ndef from_config(cls, config: RemoteDeploymentConfig) -&gt; Self:\n    return cls(**config.model_dump())\n</code></pre>"},{"location":"api/deployments/remote/#swerex.deployment.remote.RemoteDeployment.is_alive","title":"is_alive  <code>async</code>","text":"<pre><code>is_alive() -&gt; IsAliveResponse\n</code></pre> <p>Checks if the runtime is alive. The return value can be tested with bool().</p> <p>Raises:</p> Type Description <code>DeploymentNotStartedError</code> <p>If the deployment was not started.</p> Source code in <code>swerex/deployment/remote.py</code> <pre><code>async def is_alive(self) -&gt; IsAliveResponse:\n    \"\"\"Checks if the runtime is alive. The return value can be\n    tested with bool().\n\n    Raises:\n        DeploymentNotStartedError: If the deployment was not started.\n    \"\"\"\n    return await self.runtime.is_alive()\n</code></pre>"},{"location":"api/deployments/remote/#swerex.deployment.remote.RemoteDeployment.start","title":"start  <code>async</code>","text":"<pre><code>start()\n</code></pre> <p>Starts the runtime.</p> Source code in <code>swerex/deployment/remote.py</code> <pre><code>async def start(self):\n    \"\"\"Starts the runtime.\"\"\"\n    self.logger.info(\"Starting remote runtime\")\n    self._runtime = RemoteRuntime(\n        auth_token=self._config.auth_token,\n        host=self._config.host,\n        port=self._config.port,\n        timeout=self._config.timeout,\n        logger=self.logger,\n    )\n</code></pre>"},{"location":"api/deployments/remote/#swerex.deployment.remote.RemoteDeployment.stop","title":"stop  <code>async</code>","text":"<pre><code>stop()\n</code></pre> <p>Stops the runtime.</p> Source code in <code>swerex/deployment/remote.py</code> <pre><code>async def stop(self):\n    \"\"\"Stops the runtime.\"\"\"\n    await self.runtime.close()\n    self._runtime = None\n</code></pre>"},{"location":"api/runtimes/abstract/","title":"Abstract","text":""},{"location":"api/runtimes/abstract/#swerex.runtime.abstract.AbstractRuntime","title":"swerex.runtime.abstract.AbstractRuntime","text":"<pre><code>AbstractRuntime(*args: Any, **kwargs: Any)\n</code></pre> <p>               Bases: <code>ABC</code></p> <p>This is the main entry point for running stuff.</p> <p>It keeps track of all the sessions (individual repls) that are currently open.</p> Source code in <code>swerex/runtime/abstract.py</code> <pre><code>def __init__(self, *args: Any, **kwargs: Any):\n    self.logger: logging.Logger\n</code></pre>"},{"location":"api/runtimes/abstract/#swerex.runtime.abstract.AbstractRuntime.logger","title":"logger  <code>instance-attribute</code>","text":"<pre><code>logger: Logger\n</code></pre>"},{"location":"api/runtimes/abstract/#swerex.runtime.abstract.AbstractRuntime.close","title":"close  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>close() -&gt; CloseResponse\n</code></pre> <p>Closes the runtime.</p> Source code in <code>swerex/runtime/abstract.py</code> <pre><code>@abstractmethod\nasync def close(self) -&gt; CloseResponse:\n    \"\"\"Closes the runtime.\"\"\"\n    pass\n</code></pre>"},{"location":"api/runtimes/abstract/#swerex.runtime.abstract.AbstractRuntime.close_session","title":"close_session  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>close_session(request: CloseSessionRequest) -&gt; CloseSessionResponse\n</code></pre> <p>Closes a shell session (e.g., a bash shell that we started earlier).</p> Source code in <code>swerex/runtime/abstract.py</code> <pre><code>@abstractmethod\nasync def close_session(self, request: CloseSessionRequest) -&gt; CloseSessionResponse:\n    \"\"\"Closes a shell session (e.g., a bash shell that we started earlier).\"\"\"\n    pass\n</code></pre>"},{"location":"api/runtimes/abstract/#swerex.runtime.abstract.AbstractRuntime.create_session","title":"create_session  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>create_session(request: CreateSessionRequest) -&gt; CreateSessionResponse\n</code></pre> <p>Creates a new session (e.g., a bash shell).</p> Source code in <code>swerex/runtime/abstract.py</code> <pre><code>@abstractmethod\nasync def create_session(self, request: CreateSessionRequest) -&gt; CreateSessionResponse:\n    \"\"\"Creates a new session (e.g., a bash shell).\"\"\"\n    pass\n</code></pre>"},{"location":"api/runtimes/abstract/#swerex.runtime.abstract.AbstractRuntime.execute","title":"execute  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>execute(command: Command) -&gt; CommandResponse\n</code></pre> <p>Executes a command (in a sub-shell, similar to <code>subprocess.run()</code>).</p> Source code in <code>swerex/runtime/abstract.py</code> <pre><code>@abstractmethod\nasync def execute(self, command: Command) -&gt; CommandResponse:\n    \"\"\"Executes a command (in a sub-shell, similar to `subprocess.run()`).\"\"\"\n    pass\n</code></pre>"},{"location":"api/runtimes/abstract/#swerex.runtime.abstract.AbstractRuntime.is_alive","title":"is_alive  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>is_alive(*, timeout: float | None = None) -&gt; IsAliveResponse\n</code></pre> <p>Checks if the runtime is alive and running.</p> Source code in <code>swerex/runtime/abstract.py</code> <pre><code>@abstractmethod\nasync def is_alive(self, *, timeout: float | None = None) -&gt; IsAliveResponse:\n    \"\"\"Checks if the runtime is alive and running.\"\"\"\n    pass\n</code></pre>"},{"location":"api/runtimes/abstract/#swerex.runtime.abstract.AbstractRuntime.read_file","title":"read_file  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>read_file(request: ReadFileRequest) -&gt; ReadFileResponse\n</code></pre> <p>Reads a file and returns the content as a string.</p> Source code in <code>swerex/runtime/abstract.py</code> <pre><code>@abstractmethod\nasync def read_file(self, request: ReadFileRequest) -&gt; ReadFileResponse:\n    \"\"\"Reads a file and returns the content as a string.\"\"\"\n    pass\n</code></pre>"},{"location":"api/runtimes/abstract/#swerex.runtime.abstract.AbstractRuntime.run_in_session","title":"run_in_session  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>run_in_session(action: Action) -&gt; Observation\n</code></pre> <p>Runs a command in a session (e.g., a bash shell). The name of the session is determined by the <code>session</code> field in the <code>Action</code>.</p> Source code in <code>swerex/runtime/abstract.py</code> <pre><code>@abstractmethod\nasync def run_in_session(self, action: Action) -&gt; Observation:\n    \"\"\"Runs a command in a session (e.g., a bash shell).\n    The name of the session is determined by the `session` field in the `Action`.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"api/runtimes/abstract/#swerex.runtime.abstract.AbstractRuntime.upload","title":"upload  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>upload(request: UploadRequest) -&gt; UploadResponse\n</code></pre> <p>Uploads a file from the local machine to the remote machine.</p> Source code in <code>swerex/runtime/abstract.py</code> <pre><code>@abstractmethod\nasync def upload(self, request: UploadRequest) -&gt; UploadResponse:\n    \"\"\"Uploads a file from the local machine to the remote machine.\"\"\"\n    pass\n</code></pre>"},{"location":"api/runtimes/abstract/#swerex.runtime.abstract.AbstractRuntime.write_file","title":"write_file  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>write_file(request: WriteFileRequest) -&gt; WriteFileResponse\n</code></pre> <p>Writes a string to a file.</p> Source code in <code>swerex/runtime/abstract.py</code> <pre><code>@abstractmethod\nasync def write_file(self, request: WriteFileRequest) -&gt; WriteFileResponse:\n    \"\"\"Writes a string to a file.\"\"\"\n    pass\n</code></pre>"},{"location":"api/runtimes/data/","title":"Data","text":"<p>Classes:</p> Name Description <code>BashAction</code> <code>BashInterruptAction</code> <code>BashObservation</code> <code>CloseBashSessionRequest</code> <code>CloseBashSessionResponse</code> <code>CloseResponse</code> <code>Command</code> <p>A command to run as a subprocess.</p> <code>CommandResponse</code> <code>CreateBashSessionRequest</code> <code>CreateBashSessionResponse</code> <code>IsAliveResponse</code> <p>Response to the is_alive request.</p> <code>ReadFileRequest</code> <code>ReadFileResponse</code> <code>UploadRequest</code> <code>UploadResponse</code> <code>WriteFileRequest</code> <code>WriteFileResponse</code> <p>Attributes:</p> Name Type Description <code>Action</code> <p>Union type for all actions. Do not use this directly.</p> <code>CloseSessionRequest</code> <p>Union type for all close session requests. Do not use this directly.</p> <code>CloseSessionResponse</code> <p>Union type for all close session responses. Do not use this directly.</p> <code>CreateSessionRequest</code> <p>Union type for all create session requests. Do not use this directly.</p> <code>CreateSessionResponse</code> <p>Union type for all create session responses. Do not use this directly.</p> <code>Observation</code> <p>Union type for all observations. Do not use this directly.</p>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.Action","title":"Action  <code>module-attribute</code>","text":"<pre><code>Action = Annotated[BashAction | BashInterruptAction, Field(discriminator='action_type')]\n</code></pre> <p>Union type for all actions. Do not use this directly.</p>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.CloseSessionRequest","title":"CloseSessionRequest  <code>module-attribute</code>","text":"<pre><code>CloseSessionRequest = Annotated[CloseBashSessionRequest, Field(discriminator='session_type')]\n</code></pre> <p>Union type for all close session requests. Do not use this directly.</p>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.CloseSessionResponse","title":"CloseSessionResponse  <code>module-attribute</code>","text":"<pre><code>CloseSessionResponse = Annotated[CloseBashSessionResponse, Field(discriminator='session_type')]\n</code></pre> <p>Union type for all close session responses. Do not use this directly.</p>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.CreateSessionRequest","title":"CreateSessionRequest  <code>module-attribute</code>","text":"<pre><code>CreateSessionRequest = Annotated[CreateBashSessionRequest, Field(discriminator='session_type')]\n</code></pre> <p>Union type for all create session requests. Do not use this directly.</p>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.CreateSessionResponse","title":"CreateSessionResponse  <code>module-attribute</code>","text":"<pre><code>CreateSessionResponse = Annotated[CreateBashSessionResponse, Field(discriminator='session_type')]\n</code></pre> <p>Union type for all create session responses. Do not use this directly.</p>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.Observation","title":"Observation  <code>module-attribute</code>","text":"<pre><code>Observation = Annotated[BashObservation, Field(discriminator='session_type')]\n</code></pre> <p>Union type for all observations. Do not use this directly.</p>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.BashAction","title":"BashAction  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Fields:</p> <ul> <li> <code>command</code>                 (<code>str</code>)             </li> <li> <code>session</code>                 (<code>str</code>)             </li> <li> <code>timeout</code>                 (<code>float | None</code>)             </li> <li> <code>is_interactive_command</code>                 (<code>bool</code>)             </li> <li> <code>is_interactive_quit</code>                 (<code>bool</code>)             </li> <li> <code>check</code>                 (<code>Literal['silent', 'raise', 'ignore']</code>)             </li> <li> <code>error_msg</code>                 (<code>str</code>)             </li> <li> <code>expect</code>                 (<code>list[str]</code>)             </li> <li> <code>action_type</code>                 (<code>Literal['bash']</code>)             </li> </ul>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.BashAction.action_type","title":"action_type  <code>pydantic-field</code>","text":"<pre><code>action_type: Literal['bash'] = 'bash'\n</code></pre> <p>Used for type discrimination. Do not change.</p>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.BashAction.check","title":"check  <code>pydantic-field</code>","text":"<pre><code>check: Literal['silent', 'raise', 'ignore'] = 'raise'\n</code></pre> <p>Whether to check for the exit code. If \"silent\", we will extract the exit code, but not raise any errors. If there is an error extracting the exit code, it will be set to None. If \"raise\", we will raise a <code>NonZeroExitCodeError</code> if the command has a non-zero exit code or if there is an error extracting the exit code. If \"ignore\", we will not attempt to extract the exit code, but always leave it as None.</p>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.BashAction.command","title":"command  <code>pydantic-field</code>","text":"<pre><code>command: str\n</code></pre> <p>The command to run.</p>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.BashAction.error_msg","title":"error_msg  <code>pydantic-field</code>","text":"<pre><code>error_msg: str = ''\n</code></pre> <p>This error message will be used in the <code>NonZeroExitCodeError</code> if the command has a non-zero exit code and <code>check</code> is True.</p>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.BashAction.expect","title":"expect  <code>pydantic-field</code>","text":"<pre><code>expect: list[str] = []\n</code></pre> <p>Outputs to expect in addition to the PS1</p>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.BashAction.is_interactive_command","title":"is_interactive_command  <code>pydantic-field</code>","text":"<pre><code>is_interactive_command: bool = False\n</code></pre> <p>For a non-exiting command to an interactive program (e.g., gdb), set this to True.</p>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.BashAction.is_interactive_quit","title":"is_interactive_quit  <code>pydantic-field</code>","text":"<pre><code>is_interactive_quit: bool = False\n</code></pre> <p>This will disable checking for exit codes, since the command won't terminate. If the command is something like \"quit\" and should terminate the interactive program, set this to False.</p>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.BashAction.session","title":"session  <code>pydantic-field</code>","text":"<pre><code>session: str = 'default'\n</code></pre> <p>The session to run the command in.</p>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.BashAction.timeout","title":"timeout  <code>pydantic-field</code>","text":"<pre><code>timeout: float | None = None\n</code></pre> <p>The timeout for the command. None means no timeout.</p>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.BashInterruptAction","title":"BashInterruptAction  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Fields:</p> <ul> <li> <code>session</code>                 (<code>str</code>)             </li> <li> <code>timeout</code>                 (<code>float</code>)             </li> <li> <code>n_retry</code>                 (<code>int</code>)             </li> <li> <code>expect</code>                 (<code>list[str]</code>)             </li> <li> <code>action_type</code>                 (<code>Literal['bash_interrupt']</code>)             </li> </ul>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.BashInterruptAction.action_type","title":"action_type  <code>pydantic-field</code>","text":"<pre><code>action_type: Literal['bash_interrupt'] = 'bash_interrupt'\n</code></pre>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.BashInterruptAction.expect","title":"expect  <code>pydantic-field</code>","text":"<pre><code>expect: list[str] = []\n</code></pre> <p>Outputs to expect in addition to the PS1</p>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.BashInterruptAction.n_retry","title":"n_retry  <code>pydantic-field</code>","text":"<pre><code>n_retry: int = 3\n</code></pre> <p>How many times to retry quitting.</p>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.BashInterruptAction.session","title":"session  <code>pydantic-field</code>","text":"<pre><code>session: str = 'default'\n</code></pre>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.BashInterruptAction.timeout","title":"timeout  <code>pydantic-field</code>","text":"<pre><code>timeout: float = 0.2\n</code></pre> <p>The timeout for the command. None means no timeout.</p>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.BashObservation","title":"BashObservation  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Fields:</p> <ul> <li> <code>output</code>                 (<code>str</code>)             </li> <li> <code>exit_code</code>                 (<code>int | None</code>)             </li> <li> <code>failure_reason</code>                 (<code>str</code>)             </li> <li> <code>expect_string</code>                 (<code>str</code>)             </li> <li> <code>session_type</code>                 (<code>Literal['bash']</code>)             </li> </ul>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.BashObservation.exit_code","title":"exit_code  <code>pydantic-field</code>","text":"<pre><code>exit_code: int | None = None\n</code></pre>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.BashObservation.expect_string","title":"expect_string  <code>pydantic-field</code>","text":"<pre><code>expect_string: str = ''\n</code></pre> <p>Which of the expect strings was matched to terminate the command. Empty string if the command timed out etc.</p>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.BashObservation.failure_reason","title":"failure_reason  <code>pydantic-field</code>","text":"<pre><code>failure_reason: str = ''\n</code></pre>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.BashObservation.output","title":"output  <code>pydantic-field</code>","text":"<pre><code>output: str = ''\n</code></pre>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.BashObservation.session_type","title":"session_type  <code>pydantic-field</code>","text":"<pre><code>session_type: Literal['bash'] = 'bash'\n</code></pre>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.CloseBashSessionRequest","title":"CloseBashSessionRequest  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Fields:</p> <ul> <li> <code>session</code>                 (<code>str</code>)             </li> <li> <code>session_type</code>                 (<code>Literal['bash']</code>)             </li> </ul>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.CloseBashSessionRequest.session","title":"session  <code>pydantic-field</code>","text":"<pre><code>session: str = 'default'\n</code></pre>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.CloseBashSessionRequest.session_type","title":"session_type  <code>pydantic-field</code>","text":"<pre><code>session_type: Literal['bash'] = 'bash'\n</code></pre>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.CloseBashSessionResponse","title":"CloseBashSessionResponse  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Fields:</p> <ul> <li> <code>session_type</code>                 (<code>Literal['bash']</code>)             </li> </ul>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.CloseBashSessionResponse.session_type","title":"session_type  <code>pydantic-field</code>","text":"<pre><code>session_type: Literal['bash'] = 'bash'\n</code></pre>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.CloseResponse","title":"CloseResponse  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.Command","title":"Command  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A command to run as a subprocess.</p> <p>Fields:</p> <ul> <li> <code>command</code>                 (<code>str | list[str]</code>)             </li> <li> <code>timeout</code>                 (<code>float | None</code>)             </li> <li> <code>shell</code>                 (<code>bool</code>)             </li> <li> <code>check</code>                 (<code>bool</code>)             </li> <li> <code>error_msg</code>                 (<code>str</code>)             </li> <li> <code>env</code>                 (<code>dict[str, str] | None</code>)             </li> <li> <code>cwd</code>                 (<code>str | None</code>)             </li> <li> <code>merge_output_streams</code>                 (<code>bool</code>)             </li> </ul>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.Command.check","title":"check  <code>pydantic-field</code>","text":"<pre><code>check: bool = False\n</code></pre> <p>Whether to check for the exit code. If True, we will raise a <code>CommandFailedError</code> if the command fails.</p>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.Command.command","title":"command  <code>pydantic-field</code>","text":"<pre><code>command: str | list[str]\n</code></pre> <p>The command to run. Should be a list of strings (recommended because of automatic escaping of spaces etc.) unless you set <code>shell=True</code> (i.e., exactly like with <code>subprocess.run()</code>).</p>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.Command.cwd","title":"cwd  <code>pydantic-field</code>","text":"<pre><code>cwd: str | None = None\n</code></pre> <p>The current working directory to run the command in.</p>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.Command.env","title":"env  <code>pydantic-field</code>","text":"<pre><code>env: dict[str, str] | None = None\n</code></pre> <p>Environment variables to pass to the command.</p>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.Command.error_msg","title":"error_msg  <code>pydantic-field</code>","text":"<pre><code>error_msg: str = ''\n</code></pre> <p>This error message will be used in the <code>NonZeroExitCodeError</code> if the command has a non-zero exit code and <code>check</code> is True.</p>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.Command.merge_output_streams","title":"merge_output_streams  <code>pydantic-field</code>","text":"<pre><code>merge_output_streams: bool = False\n</code></pre> <p>If True, combine stdout and stderr into a single stream.</p>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.Command.shell","title":"shell  <code>pydantic-field</code>","text":"<pre><code>shell: bool = False\n</code></pre> <p>Same as the <code>subprocess.run()</code> <code>shell</code> argument.</p>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.Command.timeout","title":"timeout  <code>pydantic-field</code>","text":"<pre><code>timeout: float | None = None\n</code></pre> <p>The timeout for the command. None means no timeout.</p>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.CommandResponse","title":"CommandResponse  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Fields:</p> <ul> <li> <code>stdout</code>                 (<code>str</code>)             </li> <li> <code>stderr</code>                 (<code>str</code>)             </li> <li> <code>exit_code</code>                 (<code>int | None</code>)             </li> </ul>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.CommandResponse.exit_code","title":"exit_code  <code>pydantic-field</code>","text":"<pre><code>exit_code: int | None = None\n</code></pre>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.CommandResponse.stderr","title":"stderr  <code>pydantic-field</code>","text":"<pre><code>stderr: str = ''\n</code></pre>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.CommandResponse.stdout","title":"stdout  <code>pydantic-field</code>","text":"<pre><code>stdout: str = ''\n</code></pre>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.CreateBashSessionRequest","title":"CreateBashSessionRequest  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Fields:</p> <ul> <li> <code>startup_source</code>                 (<code>list[str]</code>)             </li> <li> <code>session</code>                 (<code>str</code>)             </li> <li> <code>session_type</code>                 (<code>Literal['bash']</code>)             </li> <li> <code>startup_timeout</code>                 (<code>float</code>)             </li> </ul>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.CreateBashSessionRequest.session","title":"session  <code>pydantic-field</code>","text":"<pre><code>session: str = 'default'\n</code></pre>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.CreateBashSessionRequest.session_type","title":"session_type  <code>pydantic-field</code>","text":"<pre><code>session_type: Literal['bash'] = 'bash'\n</code></pre>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.CreateBashSessionRequest.startup_source","title":"startup_source  <code>pydantic-field</code>","text":"<pre><code>startup_source: list[str] = []\n</code></pre> <p>Source the following files before running commands. The reason this gets a special treatment is that these files often overwrite PS1, which we need to reset.</p>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.CreateBashSessionRequest.startup_timeout","title":"startup_timeout  <code>pydantic-field</code>","text":"<pre><code>startup_timeout: float = 1.0\n</code></pre> <p>The timeout for the startup commands.</p>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.CreateBashSessionResponse","title":"CreateBashSessionResponse  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Fields:</p> <ul> <li> <code>output</code>                 (<code>str</code>)             </li> <li> <code>session_type</code>                 (<code>Literal['bash']</code>)             </li> </ul>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.CreateBashSessionResponse.output","title":"output  <code>pydantic-field</code>","text":"<pre><code>output: str = ''\n</code></pre> <p>Output from starting the session.</p>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.CreateBashSessionResponse.session_type","title":"session_type  <code>pydantic-field</code>","text":"<pre><code>session_type: Literal['bash'] = 'bash'\n</code></pre>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.IsAliveResponse","title":"IsAliveResponse  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Response to the is_alive request.</p> <p>You can test the result with bool().</p> <p>Fields:</p> <ul> <li> <code>is_alive</code>                 (<code>bool</code>)             </li> <li> <code>message</code>                 (<code>str</code>)             </li> </ul>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.IsAliveResponse.is_alive","title":"is_alive  <code>pydantic-field</code>","text":"<pre><code>is_alive: bool\n</code></pre>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.IsAliveResponse.message","title":"message  <code>pydantic-field</code>","text":"<pre><code>message: str = ''\n</code></pre> <p>Error message if is_alive is False.</p>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.ReadFileRequest","title":"ReadFileRequest  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Fields:</p> <ul> <li> <code>path</code>                 (<code>str</code>)             </li> <li> <code>encoding</code>                 (<code>str | None</code>)             </li> <li> <code>errors</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.ReadFileRequest.encoding","title":"encoding  <code>pydantic-field</code>","text":"<pre><code>encoding: str | None = None\n</code></pre> <p>Encoding to use when reading the file. None means default encoding.  This is the same as the <code>encoding</code> argument of <code>Path.read_text()</code>.</p>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.ReadFileRequest.errors","title":"errors  <code>pydantic-field</code>","text":"<pre><code>errors: str | None = None\n</code></pre> <p>Error handling to use when reading the file. None means default error handling.  This is the same as the <code>errors</code> argument of <code>Path.read_text()</code>.</p>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.ReadFileRequest.path","title":"path  <code>pydantic-field</code>","text":"<pre><code>path: str\n</code></pre> <p>Path to read from.</p>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.ReadFileResponse","title":"ReadFileResponse  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Fields:</p> <ul> <li> <code>content</code>                 (<code>str</code>)             </li> </ul>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.ReadFileResponse.content","title":"content  <code>pydantic-field</code>","text":"<pre><code>content: str = ''\n</code></pre>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.UploadRequest","title":"UploadRequest  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Fields:</p> <ul> <li> <code>source_path</code>                 (<code>str</code>)             </li> <li> <code>target_path</code>                 (<code>str</code>)             </li> </ul>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.UploadRequest.source_path","title":"source_path  <code>pydantic-field</code>","text":"<pre><code>source_path: str\n</code></pre>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.UploadRequest.target_path","title":"target_path  <code>pydantic-field</code>","text":"<pre><code>target_path: str\n</code></pre>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.UploadResponse","title":"UploadResponse  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.WriteFileRequest","title":"WriteFileRequest  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Fields:</p> <ul> <li> <code>content</code>                 (<code>str</code>)             </li> <li> <code>path</code>                 (<code>str</code>)             </li> </ul>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.WriteFileRequest.content","title":"content  <code>pydantic-field</code>","text":"<pre><code>content: str\n</code></pre>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.WriteFileRequest.path","title":"path  <code>pydantic-field</code>","text":"<pre><code>path: str\n</code></pre>"},{"location":"api/runtimes/data/#swerex.runtime.abstract.WriteFileResponse","title":"WriteFileResponse  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api/runtimes/dummy/","title":"Dummy","text":""},{"location":"api/runtimes/dummy/#swerex.runtime.dummy.DummyRuntime","title":"swerex.runtime.dummy.DummyRuntime","text":"<pre><code>DummyRuntime(*, logger: Logger | None = None, **kwargs: Any)\n</code></pre> <p>               Bases: <code>AbstractRuntime</code></p> <p>This runtime returns blank or predefined outputs. Useful for testing.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Keyword arguments (see <code>DummyRuntimeConfig</code> for details).</p> <code>{}</code> Source code in <code>swerex/runtime/dummy.py</code> <pre><code>def __init__(\n    self,\n    *,\n    logger: logging.Logger | None = None,\n    **kwargs: Any,\n):\n    \"\"\"This runtime returns blank or predefined outputs.\n    Useful for testing.\n\n    Args:\n        **kwargs: Keyword arguments (see `DummyRuntimeConfig` for details).\n    \"\"\"\n    self.run_in_session_outputs: list[BashObservation] | BashObservation = BashObservation(exit_code=0)\n    \"\"\"Predefine returns of run_in_session. If set to list, will pop from list, else will \n    return the same value.\n    \"\"\"\n    self._config = DummyRuntimeConfig(**kwargs)\n    self.logger = logger or get_logger(\"rex-runtime\")\n</code></pre>"},{"location":"api/runtimes/dummy/#swerex.runtime.dummy.DummyRuntime.logger","title":"logger  <code>instance-attribute</code>","text":"<pre><code>logger = logger or get_logger('rex-runtime')\n</code></pre>"},{"location":"api/runtimes/dummy/#swerex.runtime.dummy.DummyRuntime.run_in_session_outputs","title":"run_in_session_outputs  <code>instance-attribute</code>","text":"<pre><code>run_in_session_outputs: list[BashObservation] | BashObservation = BashObservation(exit_code=0)\n</code></pre> <p>Predefine returns of run_in_session. If set to list, will pop from list, else will  return the same value.</p>"},{"location":"api/runtimes/dummy/#swerex.runtime.dummy.DummyRuntime.close","title":"close  <code>async</code>","text":"<pre><code>close() -&gt; CloseResponse\n</code></pre> Source code in <code>swerex/runtime/dummy.py</code> <pre><code>async def close(self) -&gt; CloseResponse:\n    return CloseResponse()\n</code></pre>"},{"location":"api/runtimes/dummy/#swerex.runtime.dummy.DummyRuntime.close_session","title":"close_session  <code>async</code>","text":"<pre><code>close_session(request: CloseSessionRequest) -&gt; CloseSessionResponse\n</code></pre> Source code in <code>swerex/runtime/dummy.py</code> <pre><code>async def close_session(self, request: CloseSessionRequest) -&gt; CloseSessionResponse:\n    if request.session_type == \"bash\":\n        return CloseBashSessionResponse()\n    msg = f\"Unknown session type: {request.session_type}\"\n    raise ValueError(msg)\n</code></pre>"},{"location":"api/runtimes/dummy/#swerex.runtime.dummy.DummyRuntime.create_session","title":"create_session  <code>async</code>","text":"<pre><code>create_session(request: CreateSessionRequest) -&gt; CreateSessionResponse\n</code></pre> Source code in <code>swerex/runtime/dummy.py</code> <pre><code>async def create_session(self, request: CreateSessionRequest) -&gt; CreateSessionResponse:\n    if request.session_type == \"bash\":\n        return CreateBashSessionResponse()\n    msg = f\"Unknown session type: {request.session_type}\"\n    raise ValueError(msg)\n</code></pre>"},{"location":"api/runtimes/dummy/#swerex.runtime.dummy.DummyRuntime.execute","title":"execute  <code>async</code>","text":"<pre><code>execute(command: Command) -&gt; CommandResponse\n</code></pre> Source code in <code>swerex/runtime/dummy.py</code> <pre><code>async def execute(self, command: Command) -&gt; CommandResponse:\n    return CommandResponse(stdout=\"\", stderr=\"\", exit_code=0)\n</code></pre>"},{"location":"api/runtimes/dummy/#swerex.runtime.dummy.DummyRuntime.from_config","title":"from_config  <code>classmethod</code>","text":"<pre><code>from_config(config: DummyRuntimeConfig) -&gt; Self\n</code></pre> Source code in <code>swerex/runtime/dummy.py</code> <pre><code>@classmethod\ndef from_config(cls, config: DummyRuntimeConfig) -&gt; Self:\n    return cls(**config.model_dump())\n</code></pre>"},{"location":"api/runtimes/dummy/#swerex.runtime.dummy.DummyRuntime.is_alive","title":"is_alive  <code>async</code>","text":"<pre><code>is_alive(*, timeout: float | None = None) -&gt; IsAliveResponse\n</code></pre> Source code in <code>swerex/runtime/dummy.py</code> <pre><code>async def is_alive(self, *, timeout: float | None = None) -&gt; IsAliveResponse:\n    return IsAliveResponse(is_alive=True)\n</code></pre>"},{"location":"api/runtimes/dummy/#swerex.runtime.dummy.DummyRuntime.read_file","title":"read_file  <code>async</code>","text":"<pre><code>read_file(request: ReadFileRequest) -&gt; ReadFileResponse\n</code></pre> Source code in <code>swerex/runtime/dummy.py</code> <pre><code>async def read_file(self, request: ReadFileRequest) -&gt; ReadFileResponse:\n    return ReadFileResponse()\n</code></pre>"},{"location":"api/runtimes/dummy/#swerex.runtime.dummy.DummyRuntime.run_in_session","title":"run_in_session  <code>async</code>","text":"<pre><code>run_in_session(action: Action) -&gt; Observation\n</code></pre> Source code in <code>swerex/runtime/dummy.py</code> <pre><code>async def run_in_session(self, action: Action) -&gt; Observation:\n    if isinstance(self.run_in_session_outputs, list):\n        try:\n            return self.run_in_session_outputs.pop(0)\n        except IndexError:\n            msg = f\"Dummy runtime's run_in_session_outputs list is empty: No output for {action.command!r}\"\n            raise DummyOutputsExhaustedError(msg) from None\n    return self.run_in_session_outputs\n</code></pre>"},{"location":"api/runtimes/dummy/#swerex.runtime.dummy.DummyRuntime.upload","title":"upload  <code>async</code>","text":"<pre><code>upload(request: UploadRequest) -&gt; UploadResponse\n</code></pre> Source code in <code>swerex/runtime/dummy.py</code> <pre><code>async def upload(self, request: UploadRequest) -&gt; UploadResponse:\n    return UploadResponse()\n</code></pre>"},{"location":"api/runtimes/dummy/#swerex.runtime.dummy.DummyRuntime.write_file","title":"write_file  <code>async</code>","text":"<pre><code>write_file(request: WriteFileRequest) -&gt; WriteFileResponse\n</code></pre> Source code in <code>swerex/runtime/dummy.py</code> <pre><code>async def write_file(self, request: WriteFileRequest) -&gt; WriteFileResponse:\n    return WriteFileResponse()\n</code></pre>"},{"location":"api/runtimes/local/","title":"Local","text":""},{"location":"api/runtimes/local/#swerex.runtime.local.LocalRuntime","title":"swerex.runtime.local.LocalRuntime","text":"<pre><code>LocalRuntime(*, logger: Logger | None = None, **kwargs: Any)\n</code></pre> <p>               Bases: <code>AbstractRuntime</code></p> <p>A Runtime that runs locally and actually executes commands in a shell. If you are deploying to Modal/Fargate/etc., this class will be running within the docker container on Modal/Fargate/etc.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Keyword arguments (see <code>LocalRuntimeConfig</code> for details).</p> <code>{}</code> Source code in <code>swerex/runtime/local.py</code> <pre><code>def __init__(self, *, logger: logging.Logger | None = None, **kwargs: Any):\n    \"\"\"A Runtime that runs locally and actually executes commands in a shell.\n    If you are deploying to Modal/Fargate/etc., this class will be running within the docker container\n    on Modal/Fargate/etc.\n\n    Args:\n        **kwargs: Keyword arguments (see `LocalRuntimeConfig` for details).\n    \"\"\"\n    self._config = LocalRuntimeConfig(**kwargs)\n    self._sessions: dict[str, Session] = {}\n    self.logger = logger or get_logger(\"rex-runtime\")\n</code></pre>"},{"location":"api/runtimes/local/#swerex.runtime.local.LocalRuntime.logger","title":"logger  <code>instance-attribute</code>","text":"<pre><code>logger = logger or get_logger('rex-runtime')\n</code></pre>"},{"location":"api/runtimes/local/#swerex.runtime.local.LocalRuntime.sessions","title":"sessions  <code>property</code>","text":"<pre><code>sessions: dict[str, Session]\n</code></pre>"},{"location":"api/runtimes/local/#swerex.runtime.local.LocalRuntime.close","title":"close  <code>async</code>","text":"<pre><code>close() -&gt; CloseResponse\n</code></pre> <p>Closes the runtime.</p> Source code in <code>swerex/runtime/local.py</code> <pre><code>async def close(self) -&gt; CloseResponse:\n    \"\"\"Closes the runtime.\"\"\"\n    for session in self.sessions.values():\n        await session.close()\n    return CloseResponse()\n</code></pre>"},{"location":"api/runtimes/local/#swerex.runtime.local.LocalRuntime.close_session","title":"close_session  <code>async</code>","text":"<pre><code>close_session(request: CloseSessionRequest) -&gt; CloseSessionResponse\n</code></pre> <p>Closes a shell session.</p> Source code in <code>swerex/runtime/local.py</code> <pre><code>async def close_session(self, request: CloseSessionRequest) -&gt; CloseSessionResponse:\n    \"\"\"Closes a shell session.\"\"\"\n    if request.session not in self.sessions:\n        msg = f\"session {request.session!r} does not exist\"\n        raise SessionDoesNotExistError(msg)\n    out = await self.sessions[request.session].close()\n    del self.sessions[request.session]\n    return out\n</code></pre>"},{"location":"api/runtimes/local/#swerex.runtime.local.LocalRuntime.create_session","title":"create_session  <code>async</code>","text":"<pre><code>create_session(request: CreateSessionRequest) -&gt; CreateSessionResponse\n</code></pre> <p>Creates a new session.</p> Source code in <code>swerex/runtime/local.py</code> <pre><code>async def create_session(self, request: CreateSessionRequest) -&gt; CreateSessionResponse:\n    \"\"\"Creates a new session.\"\"\"\n    if request.session in self.sessions:\n        msg = f\"session {request.session} already exists\"\n        raise SessionExistsError(msg)\n    if isinstance(request, CreateBashSessionRequest):\n        session = BashSession(request)\n    else:\n        msg = f\"unknown session type: {request!r}\"\n        raise ValueError(msg)\n    self.sessions[request.session] = session\n    return await session.start()\n</code></pre>"},{"location":"api/runtimes/local/#swerex.runtime.local.LocalRuntime.execute","title":"execute  <code>async</code>","text":"<pre><code>execute(command: Command) -&gt; CommandResponse\n</code></pre> <p>Executes a command (independent of any shell session).</p> <p>Raises:</p> Type Description <code>CommandTimeoutError</code> <p>If the command times out.</p> <code>NonZeroExitCodeError</code> <p>If the command has a non-zero exit code and <code>check</code> is True.</p> Source code in <code>swerex/runtime/local.py</code> <pre><code>async def execute(self, command: Command) -&gt; CommandResponse:\n    \"\"\"Executes a command (independent of any shell session).\n\n    Raises:\n        CommandTimeoutError: If the command times out.\n        NonZeroExitCodeError: If the command has a non-zero exit code and `check` is True.\n    \"\"\"\n    try:\n        result = subprocess.run(\n            command.command,\n            shell=command.shell,\n            timeout=command.timeout,\n            env=command.env,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.STDOUT if command.merge_output_streams else subprocess.PIPE,\n            cwd=command.cwd,\n        )\n        r = CommandResponse(\n            stdout=result.stdout.decode(errors=\"backslashreplace\"),\n            stderr=result.stderr.decode(errors=\"backslashreplace\") if result.stderr is not None else \"\",\n            exit_code=result.returncode,\n        )\n    except subprocess.TimeoutExpired as e:\n        msg = f\"Timeout ({command.timeout}s) exceeded while running command\"\n        raise CommandTimeoutError(msg) from e\n    if command.check and result.returncode != 0:\n        msg = (\n            f\"Command {command.command!r} failed with exit code {result.returncode}. \"\n            f\"Stdout:\\n{r.stdout!r}\\nStderr:\\n{r.stderr!r}\"\n        )\n        if command.error_msg:\n            msg = f\"{command.error_msg}: {msg}\"\n        raise NonZeroExitCodeError(msg)\n    return r\n</code></pre>"},{"location":"api/runtimes/local/#swerex.runtime.local.LocalRuntime.from_config","title":"from_config  <code>classmethod</code>","text":"<pre><code>from_config(config: LocalRuntimeConfig) -&gt; Self\n</code></pre> Source code in <code>swerex/runtime/local.py</code> <pre><code>@classmethod\ndef from_config(cls, config: LocalRuntimeConfig) -&gt; Self:\n    return cls(**config.model_dump())\n</code></pre>"},{"location":"api/runtimes/local/#swerex.runtime.local.LocalRuntime.is_alive","title":"is_alive  <code>async</code>","text":"<pre><code>is_alive(*, timeout: float | None = None) -&gt; IsAliveResponse\n</code></pre> <p>Checks if the runtime is alive.</p> Source code in <code>swerex/runtime/local.py</code> <pre><code>async def is_alive(self, *, timeout: float | None = None) -&gt; IsAliveResponse:\n    \"\"\"Checks if the runtime is alive.\"\"\"\n    return IsAliveResponse(is_alive=True)\n</code></pre>"},{"location":"api/runtimes/local/#swerex.runtime.local.LocalRuntime.read_file","title":"read_file  <code>async</code>","text":"<pre><code>read_file(request: ReadFileRequest) -&gt; ReadFileResponse\n</code></pre> <p>Reads a file</p> Source code in <code>swerex/runtime/local.py</code> <pre><code>async def read_file(self, request: ReadFileRequest) -&gt; ReadFileResponse:\n    \"\"\"Reads a file\"\"\"\n    content = Path(request.path).read_text(encoding=request.encoding, errors=request.errors)\n    return ReadFileResponse(content=content)\n</code></pre>"},{"location":"api/runtimes/local/#swerex.runtime.local.LocalRuntime.run_in_session","title":"run_in_session  <code>async</code>","text":"<pre><code>run_in_session(action: Action) -&gt; Observation\n</code></pre> <p>Runs a command in a session.</p> Source code in <code>swerex/runtime/local.py</code> <pre><code>async def run_in_session(self, action: Action) -&gt; Observation:\n    \"\"\"Runs a command in a session.\"\"\"\n    if action.session not in self.sessions:\n        msg = f\"session {action.session!r} does not exist\"\n        raise SessionDoesNotExistError(msg)\n    return await self.sessions[action.session].run(action)\n</code></pre>"},{"location":"api/runtimes/local/#swerex.runtime.local.LocalRuntime.upload","title":"upload  <code>async</code>","text":"<pre><code>upload(request: UploadRequest) -&gt; UploadResponse\n</code></pre> <p>Uploads a file</p> Source code in <code>swerex/runtime/local.py</code> <pre><code>async def upload(self, request: UploadRequest) -&gt; UploadResponse:\n    \"\"\"Uploads a file\"\"\"\n    if Path(request.source_path).is_dir():\n        shutil.copytree(request.source_path, request.target_path)\n    else:\n        shutil.copy(request.source_path, request.target_path)\n    return UploadResponse()\n</code></pre>"},{"location":"api/runtimes/local/#swerex.runtime.local.LocalRuntime.write_file","title":"write_file  <code>async</code>","text":"<pre><code>write_file(request: WriteFileRequest) -&gt; WriteFileResponse\n</code></pre> <p>Writes a file</p> Source code in <code>swerex/runtime/local.py</code> <pre><code>async def write_file(self, request: WriteFileRequest) -&gt; WriteFileResponse:\n    \"\"\"Writes a file\"\"\"\n    Path(request.path).parent.mkdir(parents=True, exist_ok=True)\n    Path(request.path).write_text(request.content)\n    return WriteFileResponse()\n</code></pre>"},{"location":"api/runtimes/remote/","title":"Remote","text":""},{"location":"api/runtimes/remote/#swerex.runtime.remote.RemoteRuntime","title":"swerex.runtime.remote.RemoteRuntime","text":"<pre><code>RemoteRuntime(*, logger: Logger | None = None, **kwargs: Any)\n</code></pre> <p>               Bases: <code>AbstractRuntime</code></p> <p>A runtime that connects to a remote server.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Keyword arguments to pass to the <code>RemoteRuntimeConfig</code> constructor.</p> <code>{}</code> Source code in <code>swerex/runtime/remote.py</code> <pre><code>def __init__(\n    self,\n    *,\n    logger: logging.Logger | None = None,\n    **kwargs: Any,\n):\n    \"\"\"A runtime that connects to a remote server.\n\n    Args:\n        **kwargs: Keyword arguments to pass to the `RemoteRuntimeConfig` constructor.\n    \"\"\"\n    self._config = RemoteRuntimeConfig(**kwargs)\n    self.logger = logger or get_logger(\"rex-runtime\")\n    if not self._config.host.startswith(\"http\"):\n        self.logger.warning(\"Host %s does not start with http, adding http://\", self._config.host)\n        self._config.host = f\"http://{self._config.host}\"\n</code></pre>"},{"location":"api/runtimes/remote/#swerex.runtime.remote.RemoteRuntime.logger","title":"logger  <code>instance-attribute</code>","text":"<pre><code>logger = logger or get_logger('rex-runtime')\n</code></pre>"},{"location":"api/runtimes/remote/#swerex.runtime.remote.RemoteRuntime.close","title":"close  <code>async</code>","text":"<pre><code>close() -&gt; CloseResponse\n</code></pre> <p>Closes the runtime.</p> Source code in <code>swerex/runtime/remote.py</code> <pre><code>async def close(self) -&gt; CloseResponse:\n    \"\"\"Closes the runtime.\"\"\"\n    return await self._request(\"close\", None, CloseResponse)\n</code></pre>"},{"location":"api/runtimes/remote/#swerex.runtime.remote.RemoteRuntime.close_session","title":"close_session  <code>async</code>","text":"<pre><code>close_session(request: CloseSessionRequest) -&gt; CloseSessionResponse\n</code></pre> <p>Closes a shell session.</p> Source code in <code>swerex/runtime/remote.py</code> <pre><code>async def close_session(self, request: CloseSessionRequest) -&gt; CloseSessionResponse:\n    \"\"\"Closes a shell session.\"\"\"\n    return await self._request(\"close_session\", request, CloseSessionResponse)\n</code></pre>"},{"location":"api/runtimes/remote/#swerex.runtime.remote.RemoteRuntime.create_session","title":"create_session  <code>async</code>","text":"<pre><code>create_session(request: CreateSessionRequest) -&gt; CreateSessionResponse\n</code></pre> <p>Creates a new session.</p> Source code in <code>swerex/runtime/remote.py</code> <pre><code>async def create_session(self, request: CreateSessionRequest) -&gt; CreateSessionResponse:\n    \"\"\"Creates a new session.\"\"\"\n    return await self._request(\"create_session\", request, CreateSessionResponse)\n</code></pre>"},{"location":"api/runtimes/remote/#swerex.runtime.remote.RemoteRuntime.execute","title":"execute  <code>async</code>","text":"<pre><code>execute(command: Command) -&gt; CommandResponse\n</code></pre> <p>Executes a command (independent of any shell session).</p> Source code in <code>swerex/runtime/remote.py</code> <pre><code>async def execute(self, command: Command) -&gt; CommandResponse:\n    \"\"\"Executes a command (independent of any shell session).\"\"\"\n    return await self._request(\"execute\", command, CommandResponse)\n</code></pre>"},{"location":"api/runtimes/remote/#swerex.runtime.remote.RemoteRuntime.from_config","title":"from_config  <code>classmethod</code>","text":"<pre><code>from_config(config: RemoteRuntimeConfig) -&gt; Self\n</code></pre> Source code in <code>swerex/runtime/remote.py</code> <pre><code>@classmethod\ndef from_config(cls, config: RemoteRuntimeConfig) -&gt; Self:\n    return cls(**config.model_dump())\n</code></pre>"},{"location":"api/runtimes/remote/#swerex.runtime.remote.RemoteRuntime.is_alive","title":"is_alive  <code>async</code>","text":"<pre><code>is_alive(*, timeout: float | None = None) -&gt; IsAliveResponse\n</code></pre> <p>Checks if the runtime is alive.</p> <p>Internal server errors are thrown, everything else just has us return False together with the message.</p> Source code in <code>swerex/runtime/remote.py</code> <pre><code>async def is_alive(self, *, timeout: float | None = None) -&gt; IsAliveResponse:\n    \"\"\"Checks if the runtime is alive.\n\n    Internal server errors are thrown, everything else just has us return False\n    together with the message.\n    \"\"\"\n    try:\n        async with aiohttp.ClientSession(connector=aiohttp.TCPConnector(force_close=True)) as session:\n            timeout_value = self._get_timeout(timeout)\n            async with session.get(\n                f\"{self._api_url}/is_alive\",\n                headers=self._headers,\n                timeout=aiohttp.ClientTimeout(total=timeout_value),\n            ) as response:\n                if response.status == 200:\n                    data = await response.json()\n                    return IsAliveResponse(**data)\n                elif response.status == 511:\n                    data = await response.json()\n                    exc_transfer = _ExceptionTransfer(**data[\"swerexception\"])\n                    self._handle_transfer_exception(exc_transfer)\n\n                data = await response.json()\n                msg = f\"Status code {response.status} from {self._api_url}/is_alive. Message: {data.get('detail')}\"\n                return IsAliveResponse(is_alive=False, message=msg)\n    except aiohttp.ClientError:\n        msg = f\"Failed to connect to {self._config.host}\\n\"\n        msg += traceback.format_exc()\n        return IsAliveResponse(is_alive=False, message=msg)\n    except Exception:\n        msg = f\"Failed to connect to {self._config.host}\\n\"\n        msg += traceback.format_exc()\n        return IsAliveResponse(is_alive=False, message=msg)\n</code></pre>"},{"location":"api/runtimes/remote/#swerex.runtime.remote.RemoteRuntime.read_file","title":"read_file  <code>async</code>","text":"<pre><code>read_file(request: ReadFileRequest) -&gt; ReadFileResponse\n</code></pre> <p>Reads a file</p> Source code in <code>swerex/runtime/remote.py</code> <pre><code>async def read_file(self, request: ReadFileRequest) -&gt; ReadFileResponse:\n    \"\"\"Reads a file\"\"\"\n    return await self._request(\"read_file\", request, ReadFileResponse)\n</code></pre>"},{"location":"api/runtimes/remote/#swerex.runtime.remote.RemoteRuntime.run_in_session","title":"run_in_session  <code>async</code>","text":"<pre><code>run_in_session(action: Action) -&gt; Observation\n</code></pre> <p>Runs a command in a session.</p> Source code in <code>swerex/runtime/remote.py</code> <pre><code>async def run_in_session(self, action: Action) -&gt; Observation:\n    \"\"\"Runs a command in a session.\"\"\"\n    return await self._request(\"run_in_session\", action, Observation)\n</code></pre>"},{"location":"api/runtimes/remote/#swerex.runtime.remote.RemoteRuntime.upload","title":"upload  <code>async</code>","text":"<pre><code>upload(request: UploadRequest) -&gt; UploadResponse\n</code></pre> <p>Uploads a file</p> Source code in <code>swerex/runtime/remote.py</code> <pre><code>async def upload(self, request: UploadRequest) -&gt; UploadResponse:\n    \"\"\"Uploads a file\"\"\"\n    source = Path(request.source_path).resolve()\n    self.logger.debug(\"Uploading file from %s to %s\", request.source_path, request.target_path)\n\n    async with aiohttp.ClientSession(connector=aiohttp.TCPConnector(force_close=True)) as session:\n        if source.is_dir():\n            # Ignore cleanup errors: See https://github.com/SWE-agent/SWE-agent/issues/1005\n            with tempfile.TemporaryDirectory(ignore_cleanup_errors=True) as temp_dir:\n                zip_path = Path(temp_dir) / \"zipped_transfer.zip\"\n                shutil.make_archive(str(zip_path.with_suffix(\"\")), \"zip\", source)\n                self.logger.debug(\"Created zip file at %s\", zip_path)\n\n                with open(zip_path, \"rb\") as f:\n                    data = aiohttp.FormData()\n                    data.add_field(\"file\", f, filename=zip_path.name, content_type=\"application/zip\")\n                    data.add_field(\"target_path\", request.target_path)\n                    data.add_field(\"unzip\", \"true\")\n\n                    async with session.post(\n                        f\"{self._api_url}/upload\", data=data, headers=self._headers\n                    ) as response:\n                        await self._handle_response_errors(response)\n                        return UploadResponse(**(await response.json()))\n        elif source.is_file():\n            self.logger.debug(\"Uploading file from %s to %s\", source, request.target_path)\n\n            with open(source, \"rb\") as f:\n                data = aiohttp.FormData()\n                data.add_field(\"file\", f, filename=source.name)\n                data.add_field(\"target_path\", request.target_path)\n                data.add_field(\"unzip\", \"false\")\n\n                async with session.post(f\"{self._api_url}/upload\", data=data, headers=self._headers) as response:\n                    await self._handle_response_errors(response)\n                    return UploadResponse(**(await response.json()))\n        else:\n            msg = f\"Source path {source} is not a file or directory\"\n            raise ValueError(msg)\n</code></pre>"},{"location":"api/runtimes/remote/#swerex.runtime.remote.RemoteRuntime.wait_until_alive","title":"wait_until_alive  <code>async</code>","text":"<pre><code>wait_until_alive(*, timeout: float = 60.0)\n</code></pre> Source code in <code>swerex/runtime/remote.py</code> <pre><code>async def wait_until_alive(self, *, timeout: float = 60.0):\n    return await _wait_until_alive(self.is_alive, timeout=timeout)\n</code></pre>"},{"location":"api/runtimes/remote/#swerex.runtime.remote.RemoteRuntime.write_file","title":"write_file  <code>async</code>","text":"<pre><code>write_file(request: WriteFileRequest) -&gt; WriteFileResponse\n</code></pre> <p>Writes a file</p> Source code in <code>swerex/runtime/remote.py</code> <pre><code>async def write_file(self, request: WriteFileRequest) -&gt; WriteFileResponse:\n    \"\"\"Writes a file\"\"\"\n    return await self._request(\"write_file\", request, WriteFileResponse)\n</code></pre>"}]}